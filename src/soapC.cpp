/* soapC.cpp
   Generated by gSOAP 2.7.10 from soapMLWebService.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.10 2008-05-30 10:01:42 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf:
		return soap_in_ArrayOf_USCOREtns1_USCOREWSConf(soap, NULL, NULL, "ns3:WSConf");
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster:
		return soap_in_ArrayOf_USCOREtns1_USCOREWSCluster(soap, NULL, NULL, "ns3:WSCluster");
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode:
		return soap_in_ArrayOf_USCOREtns1_USCOREWSNode(soap, NULL, NULL, "ns3:WSNode");
	case SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring:
		return soap_in_ArrayOf_USCORExsd_USCOREstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult:
		return soap_in_ArrayOf_USCOREtns1_USCOREResult(soap, NULL, NULL, "ns3:Result");
	case SOAP_TYPE_ns3__WSConf:
		return soap_in_ns3__WSConf(soap, NULL, NULL, "ns3:WSConf");
	case SOAP_TYPE_ns3__WSFarm:
		return soap_in_ns3__WSFarm(soap, NULL, NULL, "ns3:WSFarm");
	case SOAP_TYPE_ns3__WSCluster:
		return soap_in_ns3__WSCluster(soap, NULL, NULL, "ns3:WSCluster");
	case SOAP_TYPE_ns3__WSNode:
		return soap_in_ns3__WSNode(soap, NULL, NULL, "ns3:WSNode");
	case SOAP_TYPE_ns3__Result:
		return soap_in_ns3__Result(soap, NULL, NULL, "ns3:Result");
	case SOAP_TYPE_ns2__Map:
		return soap_in_ns2__Map(soap, NULL, NULL, "ns2:Map");
	case SOAP_TYPE_ns2__mapItem:
		return soap_in_ns2__mapItem(soap, NULL, NULL, "ns2:mapItem");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_ns3__networkMeasurementSet:
		return soap_in_ns3__networkMeasurementSet(soap, NULL, NULL, "ns3:networkMeasurementSet");
	case SOAP_TYPE_ns3__networkMeasurementSetResponse:
		return soap_in_ns3__networkMeasurementSetResponse(soap, NULL, NULL, "ns3:networkMeasurementSetResponse");
	case SOAP_TYPE_ns1__getFilteredLastValues:
		return soap_in_ns1__getFilteredLastValues(soap, NULL, NULL, "ns1:getFilteredLastValues");
	case SOAP_TYPE_ns1__getFilteredLastValuesResponse:
		return soap_in_ns1__getFilteredLastValuesResponse(soap, NULL, NULL, "ns1:getFilteredLastValuesResponse");
	case SOAP_TYPE_ns1__getLastValues:
		return soap_in_ns1__getLastValues(soap, NULL, NULL, "ns1:getLastValues");
	case SOAP_TYPE_ns1__getLastValuesResponse:
		return soap_in_ns1__getLastValuesResponse(soap, NULL, NULL, "ns1:getLastValuesResponse");
	case SOAP_TYPE_ns1__getLatestConfiguration:
		return soap_in_ns1__getLatestConfiguration(soap, NULL, NULL, "ns1:getLatestConfiguration");
	case SOAP_TYPE_ns1__getLatestConfigurationResponse:
		return soap_in_ns1__getLatestConfigurationResponse(soap, NULL, NULL, "ns1:getLatestConfigurationResponse");
	case SOAP_TYPE_ns1__getConfiguration:
		return soap_in_ns1__getConfiguration(soap, NULL, NULL, "ns1:getConfiguration");
	case SOAP_TYPE_ns1__getConfigurationResponse:
		return soap_in_ns1__getConfigurationResponse(soap, NULL, NULL, "ns1:getConfigurationResponse");
	case SOAP_TYPE_ns1__getValues:
		return soap_in_ns1__getValues(soap, NULL, NULL, "ns1:getValues");
	case SOAP_TYPE_ns1__getValuesResponse:
		return soap_in_ns1__getValuesResponse(soap, NULL, NULL, "ns1:getValuesResponse");
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSConf:
		return soap_in_PointerToArrayOf_USCOREtns1_USCOREWSConf(soap, NULL, NULL, "ns3:WSConf");
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREResult:
		return soap_in_PointerToArrayOf_USCOREtns1_USCOREResult(soap, NULL, NULL, "ns3:Result");
	case SOAP_TYPE_PointerToPointerTons3__WSConf:
		return soap_in_PointerToPointerTons3__WSConf(soap, NULL, NULL, "ns3:WSConf");
	case SOAP_TYPE_PointerTons3__WSConf:
		return soap_in_PointerTons3__WSConf(soap, NULL, NULL, "ns3:WSConf");
	case SOAP_TYPE_PointerToPointerTons3__WSCluster:
		return soap_in_PointerToPointerTons3__WSCluster(soap, NULL, NULL, "ns3:WSCluster");
	case SOAP_TYPE_PointerTons3__WSCluster:
		return soap_in_PointerTons3__WSCluster(soap, NULL, NULL, "ns3:WSCluster");
	case SOAP_TYPE_PointerToPointerTons3__WSNode:
		return soap_in_PointerToPointerTons3__WSNode(soap, NULL, NULL, "ns3:WSNode");
	case SOAP_TYPE_PointerTons3__WSNode:
		return soap_in_PointerTons3__WSNode(soap, NULL, NULL, "ns3:WSNode");
	case SOAP_TYPE_PointerToPointerTons3__Result:
		return soap_in_PointerToPointerTons3__Result(soap, NULL, NULL, "ns3:Result");
	case SOAP_TYPE_PointerTons3__Result:
		return soap_in_PointerTons3__Result(soap, NULL, NULL, "ns3:Result");
	case SOAP_TYPE_PointerTons3__WSFarm:
		return soap_in_PointerTons3__WSFarm(soap, NULL, NULL, "ns3:WSFarm");
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSCluster:
		return soap_in_PointerToArrayOf_USCOREtns1_USCOREWSCluster(soap, NULL, NULL, "ns3:WSCluster");
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSNode:
		return soap_in_PointerToArrayOf_USCOREtns1_USCOREWSNode(soap, NULL, NULL, "ns3:WSNode");
	case SOAP_TYPE_PointerToArrayOf_USCORExsd_USCOREstring:
		return soap_in_PointerToArrayOf_USCORExsd_USCOREstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons2__Map:
		return soap_in_PointerTons2__Map(soap, NULL, NULL, "ns2:Map");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons2__mapItem:
		return soap_in_PointerTons2__mapItem(soap, NULL, NULL, "ns2:mapItem");
	case SOAP_TYPE_PointerToxsd__anyType:
		return soap_in_PointerToxsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (*soap->arrayType && !soap_match_array(soap, "ns3:WSConf"))
		{	*type = SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf;
			return soap_in_ArrayOf_USCOREtns1_USCOREWSConf(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns3:WSCluster"))
		{	*type = SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster;
			return soap_in_ArrayOf_USCOREtns1_USCOREWSCluster(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns3:WSNode"))
		{	*type = SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode;
			return soap_in_ArrayOf_USCOREtns1_USCOREWSNode(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "xsd:string"))
		{	*type = SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring;
			return soap_in_ArrayOf_USCORExsd_USCOREstring(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns3:Result"))
		{	*type = SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult;
			return soap_in_ArrayOf_USCOREtns1_USCOREResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:WSConf"))
		{	*type = SOAP_TYPE_ns3__WSConf;
			return soap_in_ns3__WSConf(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:WSFarm"))
		{	*type = SOAP_TYPE_ns3__WSFarm;
			return soap_in_ns3__WSFarm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:WSCluster"))
		{	*type = SOAP_TYPE_ns3__WSCluster;
			return soap_in_ns3__WSCluster(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:WSNode"))
		{	*type = SOAP_TYPE_ns3__WSNode;
			return soap_in_ns3__WSNode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:Result"))
		{	*type = SOAP_TYPE_ns3__Result;
			return soap_in_ns3__Result(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Map"))
		{	*type = SOAP_TYPE_ns2__Map;
			return soap_in_ns2__Map(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:mapItem"))
		{	*type = SOAP_TYPE_ns2__mapItem;
			return soap_in_ns2__mapItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:networkMeasurementSet"))
		{	*type = SOAP_TYPE_ns3__networkMeasurementSet;
			return soap_in_ns3__networkMeasurementSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:networkMeasurementSetResponse"))
		{	*type = SOAP_TYPE_ns3__networkMeasurementSetResponse;
			return soap_in_ns3__networkMeasurementSetResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getFilteredLastValues"))
		{	*type = SOAP_TYPE_ns1__getFilteredLastValues;
			return soap_in_ns1__getFilteredLastValues(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getFilteredLastValuesResponse"))
		{	*type = SOAP_TYPE_ns1__getFilteredLastValuesResponse;
			return soap_in_ns1__getFilteredLastValuesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getLastValues"))
		{	*type = SOAP_TYPE_ns1__getLastValues;
			return soap_in_ns1__getLastValues(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getLastValuesResponse"))
		{	*type = SOAP_TYPE_ns1__getLastValuesResponse;
			return soap_in_ns1__getLastValuesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getLatestConfiguration"))
		{	*type = SOAP_TYPE_ns1__getLatestConfiguration;
			return soap_in_ns1__getLatestConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getLatestConfigurationResponse"))
		{	*type = SOAP_TYPE_ns1__getLatestConfigurationResponse;
			return soap_in_ns1__getLatestConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getConfiguration"))
		{	*type = SOAP_TYPE_ns1__getConfiguration;
			return soap_in_ns1__getConfiguration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getConfigurationResponse"))
		{	*type = SOAP_TYPE_ns1__getConfigurationResponse;
			return soap_in_ns1__getConfigurationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getValues"))
		{	*type = SOAP_TYPE_ns1__getValues;
			return soap_in_ns1__getValues(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getValuesResponse"))
		{	*type = SOAP_TYPE_ns1__getValuesResponse;
			return soap_in_ns1__getValuesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf:
		return ((ArrayOf_USCOREtns1_USCOREWSConf *)ptr)->soap_out(soap, tag, id, "ns3:WSConf");
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster:
		return ((ArrayOf_USCOREtns1_USCOREWSCluster *)ptr)->soap_out(soap, tag, id, "ns3:WSCluster");
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode:
		return ((ArrayOf_USCOREtns1_USCOREWSNode *)ptr)->soap_out(soap, tag, id, "ns3:WSNode");
	case SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring:
		return ((ArrayOf_USCORExsd_USCOREstring *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult:
		return ((ArrayOf_USCOREtns1_USCOREResult *)ptr)->soap_out(soap, tag, id, "ns3:Result");
	case SOAP_TYPE_ns3__WSConf:
		return ((ns3__WSConf *)ptr)->soap_out(soap, tag, id, "ns3:WSConf");
	case SOAP_TYPE_ns3__WSFarm:
		return ((ns3__WSFarm *)ptr)->soap_out(soap, tag, id, "ns3:WSFarm");
	case SOAP_TYPE_ns3__WSCluster:
		return ((ns3__WSCluster *)ptr)->soap_out(soap, tag, id, "ns3:WSCluster");
	case SOAP_TYPE_ns3__WSNode:
		return ((ns3__WSNode *)ptr)->soap_out(soap, tag, id, "ns3:WSNode");
	case SOAP_TYPE_ns3__Result:
		return ((ns3__Result *)ptr)->soap_out(soap, tag, id, "ns3:Result");
	case SOAP_TYPE_ns2__Map:
		return ((ns2__Map *)ptr)->soap_out(soap, tag, id, "ns2:Map");
	case SOAP_TYPE_ns2__mapItem:
		return ((ns2__mapItem *)ptr)->soap_out(soap, tag, id, "ns2:mapItem");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__string:
		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__long:
		return ((xsd__long *)ptr)->soap_out(soap, tag, id, "xsd:long");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_ns3__networkMeasurementSet:
		return soap_out_ns3__networkMeasurementSet(soap, tag, id, (const struct ns3__networkMeasurementSet *)ptr, "ns3:networkMeasurementSet");
	case SOAP_TYPE_ns3__networkMeasurementSetResponse:
		return soap_out_ns3__networkMeasurementSetResponse(soap, tag, id, (const struct ns3__networkMeasurementSetResponse *)ptr, "ns3:networkMeasurementSetResponse");
	case SOAP_TYPE_ns1__getFilteredLastValues:
		return soap_out_ns1__getFilteredLastValues(soap, tag, id, (const struct ns1__getFilteredLastValues *)ptr, "ns1:getFilteredLastValues");
	case SOAP_TYPE_ns1__getFilteredLastValuesResponse:
		return soap_out_ns1__getFilteredLastValuesResponse(soap, tag, id, (const struct ns1__getFilteredLastValuesResponse *)ptr, "ns1:getFilteredLastValuesResponse");
	case SOAP_TYPE_ns1__getLastValues:
		return soap_out_ns1__getLastValues(soap, tag, id, (const struct ns1__getLastValues *)ptr, "ns1:getLastValues");
	case SOAP_TYPE_ns1__getLastValuesResponse:
		return soap_out_ns1__getLastValuesResponse(soap, tag, id, (const struct ns1__getLastValuesResponse *)ptr, "ns1:getLastValuesResponse");
	case SOAP_TYPE_ns1__getLatestConfiguration:
		return soap_out_ns1__getLatestConfiguration(soap, tag, id, (const struct ns1__getLatestConfiguration *)ptr, "ns1:getLatestConfiguration");
	case SOAP_TYPE_ns1__getLatestConfigurationResponse:
		return soap_out_ns1__getLatestConfigurationResponse(soap, tag, id, (const struct ns1__getLatestConfigurationResponse *)ptr, "ns1:getLatestConfigurationResponse");
	case SOAP_TYPE_ns1__getConfiguration:
		return soap_out_ns1__getConfiguration(soap, tag, id, (const struct ns1__getConfiguration *)ptr, "ns1:getConfiguration");
	case SOAP_TYPE_ns1__getConfigurationResponse:
		return soap_out_ns1__getConfigurationResponse(soap, tag, id, (const struct ns1__getConfigurationResponse *)ptr, "ns1:getConfigurationResponse");
	case SOAP_TYPE_ns1__getValues:
		return soap_out_ns1__getValues(soap, tag, id, (const struct ns1__getValues *)ptr, "ns1:getValues");
	case SOAP_TYPE_ns1__getValuesResponse:
		return soap_out_ns1__getValuesResponse(soap, tag, id, (const struct ns1__getValuesResponse *)ptr, "ns1:getValuesResponse");
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSConf:
		return soap_out_PointerToArrayOf_USCOREtns1_USCOREWSConf(soap, tag, id, (ArrayOf_USCOREtns1_USCOREWSConf *const*)ptr, "ns3:WSConf");
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREResult:
		return soap_out_PointerToArrayOf_USCOREtns1_USCOREResult(soap, tag, id, (ArrayOf_USCOREtns1_USCOREResult *const*)ptr, "ns3:Result");
	case SOAP_TYPE_PointerToPointerTons3__WSConf:
		return soap_out_PointerToPointerTons3__WSConf(soap, tag, id, (ns3__WSConf **const*)ptr, "ns3:WSConf");
	case SOAP_TYPE_PointerTons3__WSConf:
		return soap_out_PointerTons3__WSConf(soap, tag, id, (ns3__WSConf *const*)ptr, "ns3:WSConf");
	case SOAP_TYPE_PointerToPointerTons3__WSCluster:
		return soap_out_PointerToPointerTons3__WSCluster(soap, tag, id, (ns3__WSCluster **const*)ptr, "ns3:WSCluster");
	case SOAP_TYPE_PointerTons3__WSCluster:
		return soap_out_PointerTons3__WSCluster(soap, tag, id, (ns3__WSCluster *const*)ptr, "ns3:WSCluster");
	case SOAP_TYPE_PointerToPointerTons3__WSNode:
		return soap_out_PointerToPointerTons3__WSNode(soap, tag, id, (ns3__WSNode **const*)ptr, "ns3:WSNode");
	case SOAP_TYPE_PointerTons3__WSNode:
		return soap_out_PointerTons3__WSNode(soap, tag, id, (ns3__WSNode *const*)ptr, "ns3:WSNode");
	case SOAP_TYPE_PointerToPointerTons3__Result:
		return soap_out_PointerToPointerTons3__Result(soap, tag, id, (ns3__Result **const*)ptr, "ns3:Result");
	case SOAP_TYPE_PointerTons3__Result:
		return soap_out_PointerTons3__Result(soap, tag, id, (ns3__Result *const*)ptr, "ns3:Result");
	case SOAP_TYPE_PointerTons3__WSFarm:
		return soap_out_PointerTons3__WSFarm(soap, tag, id, (ns3__WSFarm *const*)ptr, "ns3:WSFarm");
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSCluster:
		return soap_out_PointerToArrayOf_USCOREtns1_USCOREWSCluster(soap, tag, id, (ArrayOf_USCOREtns1_USCOREWSCluster *const*)ptr, "ns3:WSCluster");
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSNode:
		return soap_out_PointerToArrayOf_USCOREtns1_USCOREWSNode(soap, tag, id, (ArrayOf_USCOREtns1_USCOREWSNode *const*)ptr, "ns3:WSNode");
	case SOAP_TYPE_PointerToArrayOf_USCORExsd_USCOREstring:
		return soap_out_PointerToArrayOf_USCORExsd_USCOREstring(soap, tag, id, (ArrayOf_USCORExsd_USCOREstring *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons2__Map:
		return soap_out_PointerTons2__Map(soap, tag, id, (ns2__Map *const*)ptr, "ns2:Map");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons2__mapItem:
		return soap_out_PointerTons2__mapItem(soap, tag, id, (ns2__mapItem *const*)ptr, "ns2:mapItem");
	case SOAP_TYPE_PointerToxsd__anyType:
		return soap_out_PointerToxsd__anyType(soap, tag, id, (xsd__anyType *const*)ptr, "xsd:anyType");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf:
		((ArrayOf_USCOREtns1_USCOREWSConf *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster:
		((ArrayOf_USCOREtns1_USCOREWSCluster *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode:
		((ArrayOf_USCOREtns1_USCOREWSNode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring:
		((ArrayOf_USCORExsd_USCOREstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult:
		((ArrayOf_USCOREtns1_USCOREResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__WSConf:
		((ns3__WSConf *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__WSFarm:
		((ns3__WSFarm *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__WSCluster:
		((ns3__WSCluster *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__WSNode:
		((ns3__WSNode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__Result:
		((ns3__Result *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__Map:
		((ns2__Map *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__mapItem:
		((ns2__mapItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__string:
		((xsd__string *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__long:
		((xsd__long *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__networkMeasurementSet:
		soap_serialize_ns3__networkMeasurementSet(soap, (const struct ns3__networkMeasurementSet *)ptr);
		break;
	case SOAP_TYPE_ns3__networkMeasurementSetResponse:
		soap_serialize_ns3__networkMeasurementSetResponse(soap, (const struct ns3__networkMeasurementSetResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__getFilteredLastValues:
		soap_serialize_ns1__getFilteredLastValues(soap, (const struct ns1__getFilteredLastValues *)ptr);
		break;
	case SOAP_TYPE_ns1__getFilteredLastValuesResponse:
		soap_serialize_ns1__getFilteredLastValuesResponse(soap, (const struct ns1__getFilteredLastValuesResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__getLastValues:
		soap_serialize_ns1__getLastValues(soap, (const struct ns1__getLastValues *)ptr);
		break;
	case SOAP_TYPE_ns1__getLastValuesResponse:
		soap_serialize_ns1__getLastValuesResponse(soap, (const struct ns1__getLastValuesResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__getLatestConfiguration:
		soap_serialize_ns1__getLatestConfiguration(soap, (const struct ns1__getLatestConfiguration *)ptr);
		break;
	case SOAP_TYPE_ns1__getLatestConfigurationResponse:
		soap_serialize_ns1__getLatestConfigurationResponse(soap, (const struct ns1__getLatestConfigurationResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__getConfiguration:
		soap_serialize_ns1__getConfiguration(soap, (const struct ns1__getConfiguration *)ptr);
		break;
	case SOAP_TYPE_ns1__getConfigurationResponse:
		soap_serialize_ns1__getConfigurationResponse(soap, (const struct ns1__getConfigurationResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__getValues:
		soap_serialize_ns1__getValues(soap, (const struct ns1__getValues *)ptr);
		break;
	case SOAP_TYPE_ns1__getValuesResponse:
		soap_serialize_ns1__getValuesResponse(soap, (const struct ns1__getValuesResponse *)ptr);
		break;
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSConf:
		soap_serialize_PointerToArrayOf_USCOREtns1_USCOREWSConf(soap, (ArrayOf_USCOREtns1_USCOREWSConf *const*)ptr);
		break;
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREResult:
		soap_serialize_PointerToArrayOf_USCOREtns1_USCOREResult(soap, (ArrayOf_USCOREtns1_USCOREResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons3__WSConf:
		soap_serialize_PointerToPointerTons3__WSConf(soap, (ns3__WSConf **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__WSConf:
		soap_serialize_PointerTons3__WSConf(soap, (ns3__WSConf *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons3__WSCluster:
		soap_serialize_PointerToPointerTons3__WSCluster(soap, (ns3__WSCluster **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__WSCluster:
		soap_serialize_PointerTons3__WSCluster(soap, (ns3__WSCluster *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons3__WSNode:
		soap_serialize_PointerToPointerTons3__WSNode(soap, (ns3__WSNode **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__WSNode:
		soap_serialize_PointerTons3__WSNode(soap, (ns3__WSNode *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons3__Result:
		soap_serialize_PointerToPointerTons3__Result(soap, (ns3__Result **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__Result:
		soap_serialize_PointerTons3__Result(soap, (ns3__Result *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__WSFarm:
		soap_serialize_PointerTons3__WSFarm(soap, (ns3__WSFarm *const*)ptr);
		break;
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSCluster:
		soap_serialize_PointerToArrayOf_USCOREtns1_USCOREWSCluster(soap, (ArrayOf_USCOREtns1_USCOREWSCluster *const*)ptr);
		break;
	case SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSNode:
		soap_serialize_PointerToArrayOf_USCOREtns1_USCOREWSNode(soap, (ArrayOf_USCOREtns1_USCOREWSNode *const*)ptr);
		break;
	case SOAP_TYPE_PointerToArrayOf_USCORExsd_USCOREstring:
		soap_serialize_PointerToArrayOf_USCORExsd_USCOREstring(soap, (ArrayOf_USCORExsd_USCOREstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__Map:
		soap_serialize_PointerTons2__Map(soap, (ns2__Map *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__mapItem:
		soap_serialize_PointerTons2__mapItem(soap, (ns2__mapItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__anyType:
		soap_serialize_PointerToxsd__anyType(soap, (xsd__anyType *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__long:
		return (void*)soap_instantiate_xsd__long(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__mapItem:
		return (void*)soap_instantiate_ns2__mapItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__Map:
		return (void*)soap_instantiate_ns2__Map(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__Result:
		return (void*)soap_instantiate_ns3__Result(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__WSNode:
		return (void*)soap_instantiate_ns3__WSNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__WSCluster:
		return (void*)soap_instantiate_ns3__WSCluster(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__WSFarm:
		return (void*)soap_instantiate_ns3__WSFarm(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__WSConf:
		return (void*)soap_instantiate_ns3__WSConf(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult:
		return (void*)soap_instantiate_ArrayOf_USCOREtns1_USCOREResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring:
		return (void*)soap_instantiate_ArrayOf_USCORExsd_USCOREstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode:
		return (void*)soap_instantiate_ArrayOf_USCOREtns1_USCOREWSNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster:
		return (void*)soap_instantiate_ArrayOf_USCOREtns1_USCOREWSCluster(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf:
		return (void*)soap_instantiate_ArrayOf_USCOREtns1_USCOREWSConf(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getValuesResponse:
		return (void*)soap_instantiate_ns1__getValuesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getValues:
		return (void*)soap_instantiate_ns1__getValues(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getConfigurationResponse:
		return (void*)soap_instantiate_ns1__getConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getConfiguration:
		return (void*)soap_instantiate_ns1__getConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getLatestConfigurationResponse:
		return (void*)soap_instantiate_ns1__getLatestConfigurationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getLatestConfiguration:
		return (void*)soap_instantiate_ns1__getLatestConfiguration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getLastValuesResponse:
		return (void*)soap_instantiate_ns1__getLastValuesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getLastValues:
		return (void*)soap_instantiate_ns1__getLastValues(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getFilteredLastValuesResponse:
		return (void*)soap_instantiate_ns1__getFilteredLastValuesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getFilteredLastValues:
		return (void*)soap_instantiate_ns1__getFilteredLastValues(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__networkMeasurementSetResponse:
		return (void*)soap_instantiate_ns3__networkMeasurementSetResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__networkMeasurementSet:
		return (void*)soap_instantiate_ns3__networkMeasurementSet(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__mapItem:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons2__mapItem(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			delete (xsd__anyType*)p->ptr;
		else
			delete[] (xsd__anyType*)p->ptr;
		break;
	case SOAP_TYPE_xsd__long:
		if (p->size < 0)
			delete (xsd__long*)p->ptr;
		else
			delete[] (xsd__long*)p->ptr;
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			delete (xsd__string*)p->ptr;
		else
			delete[] (xsd__string*)p->ptr;
		break;
	case SOAP_TYPE_ns2__mapItem:
		if (p->size < 0)
			delete (ns2__mapItem*)p->ptr;
		else
			delete[] (ns2__mapItem*)p->ptr;
		break;
	case SOAP_TYPE_ns2__Map:
		if (p->size < 0)
			delete (ns2__Map*)p->ptr;
		else
			delete[] (ns2__Map*)p->ptr;
		break;
	case SOAP_TYPE_ns3__Result:
		if (p->size < 0)
			delete (ns3__Result*)p->ptr;
		else
			delete[] (ns3__Result*)p->ptr;
		break;
	case SOAP_TYPE_ns3__WSNode:
		if (p->size < 0)
			delete (ns3__WSNode*)p->ptr;
		else
			delete[] (ns3__WSNode*)p->ptr;
		break;
	case SOAP_TYPE_ns3__WSCluster:
		if (p->size < 0)
			delete (ns3__WSCluster*)p->ptr;
		else
			delete[] (ns3__WSCluster*)p->ptr;
		break;
	case SOAP_TYPE_ns3__WSFarm:
		if (p->size < 0)
			delete (ns3__WSFarm*)p->ptr;
		else
			delete[] (ns3__WSFarm*)p->ptr;
		break;
	case SOAP_TYPE_ns3__WSConf:
		if (p->size < 0)
			delete (ns3__WSConf*)p->ptr;
		else
			delete[] (ns3__WSConf*)p->ptr;
		break;
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult:
		if (p->size < 0)
			delete (ArrayOf_USCOREtns1_USCOREResult*)p->ptr;
		else
			delete[] (ArrayOf_USCOREtns1_USCOREResult*)p->ptr;
		break;
	case SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring:
		if (p->size < 0)
			delete (ArrayOf_USCORExsd_USCOREstring*)p->ptr;
		else
			delete[] (ArrayOf_USCORExsd_USCOREstring*)p->ptr;
		break;
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode:
		if (p->size < 0)
			delete (ArrayOf_USCOREtns1_USCOREWSNode*)p->ptr;
		else
			delete[] (ArrayOf_USCOREtns1_USCOREWSNode*)p->ptr;
		break;
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster:
		if (p->size < 0)
			delete (ArrayOf_USCOREtns1_USCOREWSCluster*)p->ptr;
		else
			delete[] (ArrayOf_USCOREtns1_USCOREWSCluster*)p->ptr;
		break;
	case SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf:
		if (p->size < 0)
			delete (ArrayOf_USCOREtns1_USCOREWSConf*)p->ptr;
		else
			delete[] (ArrayOf_USCOREtns1_USCOREWSConf*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getValuesResponse:
		if (p->size < 0)
			delete (struct ns1__getValuesResponse*)p->ptr;
		else
			delete[] (struct ns1__getValuesResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getValues:
		if (p->size < 0)
			delete (struct ns1__getValues*)p->ptr;
		else
			delete[] (struct ns1__getValues*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getConfigurationResponse:
		if (p->size < 0)
			delete (struct ns1__getConfigurationResponse*)p->ptr;
		else
			delete[] (struct ns1__getConfigurationResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getConfiguration:
		if (p->size < 0)
			delete (struct ns1__getConfiguration*)p->ptr;
		else
			delete[] (struct ns1__getConfiguration*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getLatestConfigurationResponse:
		if (p->size < 0)
			delete (struct ns1__getLatestConfigurationResponse*)p->ptr;
		else
			delete[] (struct ns1__getLatestConfigurationResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getLatestConfiguration:
		if (p->size < 0)
			delete (struct ns1__getLatestConfiguration*)p->ptr;
		else
			delete[] (struct ns1__getLatestConfiguration*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getLastValuesResponse:
		if (p->size < 0)
			delete (struct ns1__getLastValuesResponse*)p->ptr;
		else
			delete[] (struct ns1__getLastValuesResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getLastValues:
		if (p->size < 0)
			delete (struct ns1__getLastValues*)p->ptr;
		else
			delete[] (struct ns1__getLastValues*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getFilteredLastValuesResponse:
		if (p->size < 0)
			delete (struct ns1__getFilteredLastValuesResponse*)p->ptr;
		else
			delete[] (struct ns1__getFilteredLastValuesResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__getFilteredLastValues:
		if (p->size < 0)
			delete (struct ns1__getFilteredLastValues*)p->ptr;
		else
			delete[] (struct ns1__getFilteredLastValues*)p->ptr;
		break;
	case SOAP_TYPE_ns3__networkMeasurementSetResponse:
		if (p->size < 0)
			delete (struct ns3__networkMeasurementSetResponse*)p->ptr;
		else
			delete[] (struct ns3__networkMeasurementSetResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns3__networkMeasurementSet:
		if (p->size < 0)
			delete (struct ns3__networkMeasurementSet*)p->ptr;
		else
			delete[] (struct ns3__networkMeasurementSet*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__mapItem:
		if (p->size < 0)
			delete (std::vector<ns2__mapItem * >*)p->ptr;
		else
			delete[] (std::vector<ns2__mapItem * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__mapItem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns2__mapItem * >*)p)[len] = *(ns2__mapItem **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
}

void ArrayOf_USCOREtns1_USCOREWSConf::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void ArrayOf_USCOREtns1_USCOREWSConf::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons3__WSConf(soap, this->__ptr + i);
		}
}

int ArrayOf_USCOREtns1_USCOREWSConf::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ArrayOf_USCOREtns1_USCOREWSConf::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ArrayOf_USCOREtns1_USCOREWSConf(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, const char *tag, int id, const ArrayOf_USCOREtns1_USCOREWSConf *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "ns3:WSConf", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons3__WSConf(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ArrayOf_USCOREtns1_USCOREWSConf::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ArrayOf_USCOREtns1_USCOREWSConf(soap, this, tag, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSConf * SOAP_FMAC4 soap_get_ArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSConf *p, const char *tag, const char *type)
{
	if ((p = soap_in_ArrayOf_USCOREtns1_USCOREWSConf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ArrayOf_USCOREtns1_USCOREWSConf::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ArrayOf_USCOREtns1_USCOREWSConf(soap, tag, this, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSConf * SOAP_FMAC4 soap_in_ArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, const char *tag, ArrayOf_USCOREtns1_USCOREWSConf *a, const char *type)
{	int i, j;
	ns3__WSConf **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ArrayOf_USCOREtns1_USCOREWSConf *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf, sizeof(ArrayOf_USCOREtns1_USCOREWSConf), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (ns3__WSConf **)soap_malloc(soap, sizeof(ns3__WSConf *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons3__WSConf(soap, NULL, a->__ptr + i, "ns3:WSConf"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (ns3__WSConf **)soap_push_block(soap, sizeof(ns3__WSConf *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons3__WSConf(soap, NULL, p, "ns3:WSConf"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (ns3__WSConf **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ArrayOf_USCOREtns1_USCOREWSConf *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf, 0, sizeof(ArrayOf_USCOREtns1_USCOREWSConf), 0, soap_copy_ArrayOf_USCOREtns1_USCOREWSConf);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ArrayOf_USCOREtns1_USCOREWSConf * SOAP_FMAC6 soap_new_ArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, int n)
{	return soap_instantiate_ArrayOf_USCOREtns1_USCOREWSConf(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSConf *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSConf * SOAP_FMAC4 soap_instantiate_ArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ArrayOf_USCOREtns1_USCOREWSConf(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSConf;
		if (size)
			*size = sizeof(ArrayOf_USCOREtns1_USCOREWSConf);
		((ArrayOf_USCOREtns1_USCOREWSConf*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSConf[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ArrayOf_USCOREtns1_USCOREWSConf);
		for (int i = 0; i < n; i++)
			((ArrayOf_USCOREtns1_USCOREWSConf*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ArrayOf_USCOREtns1_USCOREWSConf*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ArrayOf_USCOREtns1_USCOREWSConf %p -> %p\n", q, p));
	*(ArrayOf_USCOREtns1_USCOREWSConf*)p = *(ArrayOf_USCOREtns1_USCOREWSConf*)q;
}

void ArrayOf_USCOREtns1_USCOREWSCluster::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void ArrayOf_USCOREtns1_USCOREWSCluster::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons3__WSCluster(soap, this->__ptr + i);
		}
}

int ArrayOf_USCOREtns1_USCOREWSCluster::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ArrayOf_USCOREtns1_USCOREWSCluster::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ArrayOf_USCOREtns1_USCOREWSCluster(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, const char *tag, int id, const ArrayOf_USCOREtns1_USCOREWSCluster *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "ns3:WSCluster", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons3__WSCluster(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ArrayOf_USCOREtns1_USCOREWSCluster::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ArrayOf_USCOREtns1_USCOREWSCluster(soap, this, tag, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSCluster * SOAP_FMAC4 soap_get_ArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSCluster *p, const char *tag, const char *type)
{
	if ((p = soap_in_ArrayOf_USCOREtns1_USCOREWSCluster(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ArrayOf_USCOREtns1_USCOREWSCluster::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ArrayOf_USCOREtns1_USCOREWSCluster(soap, tag, this, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSCluster * SOAP_FMAC4 soap_in_ArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, const char *tag, ArrayOf_USCOREtns1_USCOREWSCluster *a, const char *type)
{	int i, j;
	ns3__WSCluster **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ArrayOf_USCOREtns1_USCOREWSCluster *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster, sizeof(ArrayOf_USCOREtns1_USCOREWSCluster), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (ns3__WSCluster **)soap_malloc(soap, sizeof(ns3__WSCluster *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons3__WSCluster(soap, NULL, a->__ptr + i, "ns3:WSCluster"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (ns3__WSCluster **)soap_push_block(soap, sizeof(ns3__WSCluster *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons3__WSCluster(soap, NULL, p, "ns3:WSCluster"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (ns3__WSCluster **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ArrayOf_USCOREtns1_USCOREWSCluster *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster, 0, sizeof(ArrayOf_USCOREtns1_USCOREWSCluster), 0, soap_copy_ArrayOf_USCOREtns1_USCOREWSCluster);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ArrayOf_USCOREtns1_USCOREWSCluster * SOAP_FMAC6 soap_new_ArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, int n)
{	return soap_instantiate_ArrayOf_USCOREtns1_USCOREWSCluster(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSCluster *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSCluster * SOAP_FMAC4 soap_instantiate_ArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ArrayOf_USCOREtns1_USCOREWSCluster(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSCluster;
		if (size)
			*size = sizeof(ArrayOf_USCOREtns1_USCOREWSCluster);
		((ArrayOf_USCOREtns1_USCOREWSCluster*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSCluster[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ArrayOf_USCOREtns1_USCOREWSCluster);
		for (int i = 0; i < n; i++)
			((ArrayOf_USCOREtns1_USCOREWSCluster*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ArrayOf_USCOREtns1_USCOREWSCluster*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ArrayOf_USCOREtns1_USCOREWSCluster %p -> %p\n", q, p));
	*(ArrayOf_USCOREtns1_USCOREWSCluster*)p = *(ArrayOf_USCOREtns1_USCOREWSCluster*)q;
}

void ArrayOf_USCOREtns1_USCOREWSNode::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void ArrayOf_USCOREtns1_USCOREWSNode::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons3__WSNode(soap, this->__ptr + i);
		}
}

int ArrayOf_USCOREtns1_USCOREWSNode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ArrayOf_USCOREtns1_USCOREWSNode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ArrayOf_USCOREtns1_USCOREWSNode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, const char *tag, int id, const ArrayOf_USCOREtns1_USCOREWSNode *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "ns3:WSNode", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons3__WSNode(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ArrayOf_USCOREtns1_USCOREWSNode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ArrayOf_USCOREtns1_USCOREWSNode(soap, this, tag, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSNode * SOAP_FMAC4 soap_get_ArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSNode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ArrayOf_USCOREtns1_USCOREWSNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ArrayOf_USCOREtns1_USCOREWSNode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ArrayOf_USCOREtns1_USCOREWSNode(soap, tag, this, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSNode * SOAP_FMAC4 soap_in_ArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, const char *tag, ArrayOf_USCOREtns1_USCOREWSNode *a, const char *type)
{	int i, j;
	ns3__WSNode **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ArrayOf_USCOREtns1_USCOREWSNode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode, sizeof(ArrayOf_USCOREtns1_USCOREWSNode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (ns3__WSNode **)soap_malloc(soap, sizeof(ns3__WSNode *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons3__WSNode(soap, NULL, a->__ptr + i, "ns3:WSNode"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (ns3__WSNode **)soap_push_block(soap, sizeof(ns3__WSNode *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons3__WSNode(soap, NULL, p, "ns3:WSNode"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (ns3__WSNode **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ArrayOf_USCOREtns1_USCOREWSNode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode, 0, sizeof(ArrayOf_USCOREtns1_USCOREWSNode), 0, soap_copy_ArrayOf_USCOREtns1_USCOREWSNode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ArrayOf_USCOREtns1_USCOREWSNode * SOAP_FMAC6 soap_new_ArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, int n)
{	return soap_instantiate_ArrayOf_USCOREtns1_USCOREWSNode(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSNode *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSNode * SOAP_FMAC4 soap_instantiate_ArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ArrayOf_USCOREtns1_USCOREWSNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSNode;
		if (size)
			*size = sizeof(ArrayOf_USCOREtns1_USCOREWSNode);
		((ArrayOf_USCOREtns1_USCOREWSNode*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSNode[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ArrayOf_USCOREtns1_USCOREWSNode);
		for (int i = 0; i < n; i++)
			((ArrayOf_USCOREtns1_USCOREWSNode*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ArrayOf_USCOREtns1_USCOREWSNode*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ArrayOf_USCOREtns1_USCOREWSNode %p -> %p\n", q, p));
	*(ArrayOf_USCOREtns1_USCOREWSNode*)p = *(ArrayOf_USCOREtns1_USCOREWSNode*)q;
}

void ArrayOf_USCORExsd_USCOREstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void ArrayOf_USCORExsd_USCOREstring::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring))
		for (int i = 0; i < this->__size; i++)
		{	soap_embedded(soap, this->__ptr + i, SOAP_TYPE_std__string);
			soap_serialize_std__string(soap, this->__ptr + i);
		}
}

int ArrayOf_USCORExsd_USCOREstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ArrayOf_USCORExsd_USCOREstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ArrayOf_USCORExsd_USCOREstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOf_USCORExsd_USCOREstring(struct soap *soap, const char *tag, int id, const ArrayOf_USCORExsd_USCOREstring *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "xsd:string", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_std__string(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ArrayOf_USCORExsd_USCOREstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ArrayOf_USCORExsd_USCOREstring(soap, this, tag, type);
}

SOAP_FMAC3 ArrayOf_USCORExsd_USCOREstring * SOAP_FMAC4 soap_get_ArrayOf_USCORExsd_USCOREstring(struct soap *soap, ArrayOf_USCORExsd_USCOREstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_ArrayOf_USCORExsd_USCOREstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ArrayOf_USCORExsd_USCOREstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ArrayOf_USCORExsd_USCOREstring(soap, tag, this, type);
}

SOAP_FMAC3 ArrayOf_USCORExsd_USCOREstring * SOAP_FMAC4 soap_in_ArrayOf_USCORExsd_USCOREstring(struct soap *soap, const char *tag, ArrayOf_USCORExsd_USCOREstring *a, const char *type)
{	int i, j;
	std::string *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ArrayOf_USCORExsd_USCOREstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring, sizeof(ArrayOf_USCORExsd_USCOREstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_std__string(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_std__string(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_std__string(soap, NULL, a->__ptr + i, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	std::string q;
			soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (std::string *)soap_push_block(soap, sizeof(std::string));
				if (!p)
					return NULL;
				memcpy(p, &q, sizeof(std::string));
				soap_default_std__string(soap, p);
				if (!soap_in_std__string(soap, NULL, p, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			if (soap->blist->size)
				a->__ptr = soap_new_std__string(soap, soap->blist->size/sizeof(std::string));
			else
				a->__ptr = NULL;
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ArrayOf_USCORExsd_USCOREstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring, 0, sizeof(ArrayOf_USCORExsd_USCOREstring), 0, soap_copy_ArrayOf_USCORExsd_USCOREstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ArrayOf_USCORExsd_USCOREstring * SOAP_FMAC6 soap_new_ArrayOf_USCORExsd_USCOREstring(struct soap *soap, int n)
{	return soap_instantiate_ArrayOf_USCORExsd_USCOREstring(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ArrayOf_USCORExsd_USCOREstring(struct soap *soap, ArrayOf_USCORExsd_USCOREstring *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ArrayOf_USCORExsd_USCOREstring * SOAP_FMAC4 soap_instantiate_ArrayOf_USCORExsd_USCOREstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ArrayOf_USCORExsd_USCOREstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ArrayOf_USCORExsd_USCOREstring;
		if (size)
			*size = sizeof(ArrayOf_USCORExsd_USCOREstring);
		((ArrayOf_USCORExsd_USCOREstring*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ArrayOf_USCORExsd_USCOREstring[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ArrayOf_USCORExsd_USCOREstring);
		for (int i = 0; i < n; i++)
			((ArrayOf_USCORExsd_USCOREstring*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ArrayOf_USCORExsd_USCOREstring*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOf_USCORExsd_USCOREstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ArrayOf_USCORExsd_USCOREstring %p -> %p\n", q, p));
	*(ArrayOf_USCORExsd_USCOREstring*)p = *(ArrayOf_USCORExsd_USCOREstring*)q;
}

void ArrayOf_USCOREtns1_USCOREResult::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void ArrayOf_USCOREtns1_USCOREResult::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons3__Result(soap, this->__ptr + i);
		}
}

int ArrayOf_USCOREtns1_USCOREResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ArrayOf_USCOREtns1_USCOREResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ArrayOf_USCOREtns1_USCOREResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOf_USCOREtns1_USCOREResult(struct soap *soap, const char *tag, int id, const ArrayOf_USCOREtns1_USCOREResult *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "ns3:Result", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons3__Result(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ArrayOf_USCOREtns1_USCOREResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ArrayOf_USCOREtns1_USCOREResult(soap, this, tag, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREResult * SOAP_FMAC4 soap_get_ArrayOf_USCOREtns1_USCOREResult(struct soap *soap, ArrayOf_USCOREtns1_USCOREResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ArrayOf_USCOREtns1_USCOREResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ArrayOf_USCOREtns1_USCOREResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ArrayOf_USCOREtns1_USCOREResult(soap, tag, this, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREResult * SOAP_FMAC4 soap_in_ArrayOf_USCOREtns1_USCOREResult(struct soap *soap, const char *tag, ArrayOf_USCOREtns1_USCOREResult *a, const char *type)
{	int i, j;
	ns3__Result **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ArrayOf_USCOREtns1_USCOREResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult, sizeof(ArrayOf_USCOREtns1_USCOREResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (ns3__Result **)soap_malloc(soap, sizeof(ns3__Result *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons3__Result(soap, NULL, a->__ptr + i, "ns3:Result"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (ns3__Result **)soap_push_block(soap, sizeof(ns3__Result *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons3__Result(soap, NULL, p, "ns3:Result"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (ns3__Result **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ArrayOf_USCOREtns1_USCOREResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult, 0, sizeof(ArrayOf_USCOREtns1_USCOREResult), 0, soap_copy_ArrayOf_USCOREtns1_USCOREResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ArrayOf_USCOREtns1_USCOREResult * SOAP_FMAC6 soap_new_ArrayOf_USCOREtns1_USCOREResult(struct soap *soap, int n)
{	return soap_instantiate_ArrayOf_USCOREtns1_USCOREResult(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ArrayOf_USCOREtns1_USCOREResult(struct soap *soap, ArrayOf_USCOREtns1_USCOREResult *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREResult * SOAP_FMAC4 soap_instantiate_ArrayOf_USCOREtns1_USCOREResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ArrayOf_USCOREtns1_USCOREResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREResult;
		if (size)
			*size = sizeof(ArrayOf_USCOREtns1_USCOREResult);
		((ArrayOf_USCOREtns1_USCOREResult*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ArrayOf_USCOREtns1_USCOREResult);
		for (int i = 0; i < n; i++)
			((ArrayOf_USCOREtns1_USCOREResult*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ArrayOf_USCOREtns1_USCOREResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOf_USCOREtns1_USCOREResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ArrayOf_USCOREtns1_USCOREResult %p -> %p\n", q, p));
	*(ArrayOf_USCOREtns1_USCOREResult*)p = *(ArrayOf_USCOREtns1_USCOREResult*)q;
}

void ns3__WSConf::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->ns3__WSConf::confTime);
	this->ns3__WSConf::wsFarm = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns3__WSConf::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__WSFarm(soap, &this->ns3__WSConf::wsFarm);
	/* transient soap skipped */
}

int ns3__WSConf::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__WSConf);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__WSConf::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__WSConf(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__WSConf(struct soap *soap, const char *tag, int id, const ns3__WSConf *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__WSConf), "ns3:WSConf"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_LONG64(soap, "confTime", -1, &(a->ns3__WSConf::confTime), ""))
		return soap->error;
	if (soap_out_PointerTons3__WSFarm(soap, "wsFarm", -1, &(a->ns3__WSConf::wsFarm), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__WSConf::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__WSConf(soap, this, tag, type);
}

SOAP_FMAC3 ns3__WSConf * SOAP_FMAC4 soap_get_ns3__WSConf(struct soap *soap, ns3__WSConf *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__WSConf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__WSConf::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__WSConf(soap, tag, this, type);
}

SOAP_FMAC3 ns3__WSConf * SOAP_FMAC4 soap_in_ns3__WSConf(struct soap *soap, const char *tag, ns3__WSConf *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__WSConf *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__WSConf, sizeof(ns3__WSConf), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__WSConf)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__WSConf *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_confTime1 = 1, soap_flag_wsFarm1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_confTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "confTime", &(a->ns3__WSConf::confTime), "xsd:long"))
				{	soap_flag_confTime1--;
					continue;
				}
			if (soap_flag_wsFarm1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__WSFarm(soap, "wsFarm", &(a->ns3__WSConf::wsFarm), "ns3:WSFarm"))
				{	soap_flag_wsFarm1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__WSConf *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__WSConf, 0, sizeof(ns3__WSConf), 0, soap_copy_ns3__WSConf);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_confTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns3__WSConf * SOAP_FMAC6 soap_new_ns3__WSConf(struct soap *soap, int n)
{	return soap_instantiate_ns3__WSConf(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns3__WSConf(struct soap *soap, ns3__WSConf *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns3__WSConf * SOAP_FMAC4 soap_instantiate_ns3__WSConf(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__WSConf(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__WSConf, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns3__WSConf;
		if (size)
			*size = sizeof(ns3__WSConf);
		((ns3__WSConf*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns3__WSConf[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__WSConf);
		for (int i = 0; i < n; i++)
			((ns3__WSConf*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__WSConf*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__WSConf(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__WSConf %p -> %p\n", q, p));
	*(ns3__WSConf*)p = *(ns3__WSConf*)q;
}

void ns3__WSFarm::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__WSFarm::clusterList = NULL;
	this->ns3__WSFarm::farmName = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns3__WSFarm::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToArrayOf_USCOREtns1_USCOREWSCluster(soap, &this->ns3__WSFarm::clusterList);
	soap_serialize_PointerTostd__string(soap, &this->ns3__WSFarm::farmName);
	/* transient soap skipped */
}

int ns3__WSFarm::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__WSFarm);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__WSFarm::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__WSFarm(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__WSFarm(struct soap *soap, const char *tag, int id, const ns3__WSFarm *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__WSFarm), "ns3:WSFarm"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerToArrayOf_USCOREtns1_USCOREWSCluster(soap, "clusterList", -1, &(a->ns3__WSFarm::clusterList), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "farmName", -1, &(a->ns3__WSFarm::farmName), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__WSFarm::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__WSFarm(soap, this, tag, type);
}

SOAP_FMAC3 ns3__WSFarm * SOAP_FMAC4 soap_get_ns3__WSFarm(struct soap *soap, ns3__WSFarm *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__WSFarm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__WSFarm::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__WSFarm(soap, tag, this, type);
}

SOAP_FMAC3 ns3__WSFarm * SOAP_FMAC4 soap_in_ns3__WSFarm(struct soap *soap, const char *tag, ns3__WSFarm *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__WSFarm *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__WSFarm, sizeof(ns3__WSFarm), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__WSFarm)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__WSFarm *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_clusterList1 = 1, soap_flag_farmName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_clusterList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToArrayOf_USCOREtns1_USCOREWSCluster(soap, "clusterList", &(a->ns3__WSFarm::clusterList), "ns3:WSCluster"))
				{	soap_flag_clusterList1--;
					continue;
				}
			if (soap_flag_farmName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "farmName", &(a->ns3__WSFarm::farmName), "xsd:string"))
				{	soap_flag_farmName1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__WSFarm *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__WSFarm, 0, sizeof(ns3__WSFarm), 0, soap_copy_ns3__WSFarm);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns3__WSFarm * SOAP_FMAC6 soap_new_ns3__WSFarm(struct soap *soap, int n)
{	return soap_instantiate_ns3__WSFarm(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns3__WSFarm(struct soap *soap, ns3__WSFarm *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns3__WSFarm * SOAP_FMAC4 soap_instantiate_ns3__WSFarm(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__WSFarm(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__WSFarm, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns3__WSFarm;
		if (size)
			*size = sizeof(ns3__WSFarm);
		((ns3__WSFarm*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns3__WSFarm[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__WSFarm);
		for (int i = 0; i < n; i++)
			((ns3__WSFarm*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__WSFarm*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__WSFarm(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__WSFarm %p -> %p\n", q, p));
	*(ns3__WSFarm*)p = *(ns3__WSFarm*)q;
}

void ns3__WSCluster::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__WSCluster::clusterName = NULL;
	this->ns3__WSCluster::nodeList = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns3__WSCluster::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns3__WSCluster::clusterName);
	soap_serialize_PointerToArrayOf_USCOREtns1_USCOREWSNode(soap, &this->ns3__WSCluster::nodeList);
	/* transient soap skipped */
}

int ns3__WSCluster::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__WSCluster);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__WSCluster::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__WSCluster(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__WSCluster(struct soap *soap, const char *tag, int id, const ns3__WSCluster *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__WSCluster), "ns3:WSCluster"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__string(soap, "clusterName", -1, &(a->ns3__WSCluster::clusterName), ""))
		return soap->error;
	if (soap_out_PointerToArrayOf_USCOREtns1_USCOREWSNode(soap, "nodeList", -1, &(a->ns3__WSCluster::nodeList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__WSCluster::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__WSCluster(soap, this, tag, type);
}

SOAP_FMAC3 ns3__WSCluster * SOAP_FMAC4 soap_get_ns3__WSCluster(struct soap *soap, ns3__WSCluster *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__WSCluster(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__WSCluster::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__WSCluster(soap, tag, this, type);
}

SOAP_FMAC3 ns3__WSCluster * SOAP_FMAC4 soap_in_ns3__WSCluster(struct soap *soap, const char *tag, ns3__WSCluster *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__WSCluster *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__WSCluster, sizeof(ns3__WSCluster), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__WSCluster)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__WSCluster *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_clusterName1 = 1, soap_flag_nodeList1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_clusterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "clusterName", &(a->ns3__WSCluster::clusterName), "xsd:string"))
				{	soap_flag_clusterName1--;
					continue;
				}
			if (soap_flag_nodeList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToArrayOf_USCOREtns1_USCOREWSNode(soap, "nodeList", &(a->ns3__WSCluster::nodeList), "ns3:WSNode"))
				{	soap_flag_nodeList1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__WSCluster *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__WSCluster, 0, sizeof(ns3__WSCluster), 0, soap_copy_ns3__WSCluster);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns3__WSCluster * SOAP_FMAC6 soap_new_ns3__WSCluster(struct soap *soap, int n)
{	return soap_instantiate_ns3__WSCluster(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns3__WSCluster(struct soap *soap, ns3__WSCluster *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns3__WSCluster * SOAP_FMAC4 soap_instantiate_ns3__WSCluster(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__WSCluster(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__WSCluster, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns3__WSCluster;
		if (size)
			*size = sizeof(ns3__WSCluster);
		((ns3__WSCluster*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns3__WSCluster[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__WSCluster);
		for (int i = 0; i < n; i++)
			((ns3__WSCluster*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__WSCluster*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__WSCluster(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__WSCluster %p -> %p\n", q, p));
	*(ns3__WSCluster*)p = *(ns3__WSCluster*)q;
}

void ns3__WSNode::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__WSNode::nodeName = NULL;
	this->ns3__WSNode::paramList = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns3__WSNode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns3__WSNode::nodeName);
	soap_serialize_PointerToArrayOf_USCORExsd_USCOREstring(soap, &this->ns3__WSNode::paramList);
	/* transient soap skipped */
}

int ns3__WSNode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__WSNode);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__WSNode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__WSNode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__WSNode(struct soap *soap, const char *tag, int id, const ns3__WSNode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__WSNode), "ns3:WSNode"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__string(soap, "nodeName", -1, &(a->ns3__WSNode::nodeName), ""))
		return soap->error;
	if (soap_out_PointerToArrayOf_USCORExsd_USCOREstring(soap, "paramList", -1, &(a->ns3__WSNode::paramList), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__WSNode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__WSNode(soap, this, tag, type);
}

SOAP_FMAC3 ns3__WSNode * SOAP_FMAC4 soap_get_ns3__WSNode(struct soap *soap, ns3__WSNode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__WSNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__WSNode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__WSNode(soap, tag, this, type);
}

SOAP_FMAC3 ns3__WSNode * SOAP_FMAC4 soap_in_ns3__WSNode(struct soap *soap, const char *tag, ns3__WSNode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__WSNode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__WSNode, sizeof(ns3__WSNode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__WSNode)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__WSNode *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_nodeName1 = 1, soap_flag_paramList1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_nodeName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "nodeName", &(a->ns3__WSNode::nodeName), "xsd:string"))
				{	soap_flag_nodeName1--;
					continue;
				}
			if (soap_flag_paramList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToArrayOf_USCORExsd_USCOREstring(soap, "paramList", &(a->ns3__WSNode::paramList), "xsd:string"))
				{	soap_flag_paramList1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__WSNode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__WSNode, 0, sizeof(ns3__WSNode), 0, soap_copy_ns3__WSNode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns3__WSNode * SOAP_FMAC6 soap_new_ns3__WSNode(struct soap *soap, int n)
{	return soap_instantiate_ns3__WSNode(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns3__WSNode(struct soap *soap, ns3__WSNode *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns3__WSNode * SOAP_FMAC4 soap_instantiate_ns3__WSNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__WSNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__WSNode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns3__WSNode;
		if (size)
			*size = sizeof(ns3__WSNode);
		((ns3__WSNode*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns3__WSNode[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__WSNode);
		for (int i = 0; i < n; i++)
			((ns3__WSNode*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__WSNode*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__WSNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__WSNode %p -> %p\n", q, p));
	*(ns3__WSNode*)p = *(ns3__WSNode*)q;
}

void ns3__Result::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__Result::clusterName = NULL;
	this->ns3__Result::farmName = NULL;
	this->ns3__Result::nodeName = NULL;
	this->ns3__Result::param = NULL;
	soap_default_LONG64(soap, &this->ns3__Result::time);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns3__Result::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns3__Result::clusterName);
	soap_serialize_PointerTostd__string(soap, &this->ns3__Result::farmName);
	soap_serialize_PointerTostd__string(soap, &this->ns3__Result::nodeName);
	soap_serialize_PointerTons2__Map(soap, &this->ns3__Result::param);
	/* transient soap skipped */
}

int ns3__Result::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__Result);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__Result::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__Result(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Result(struct soap *soap, const char *tag, int id, const ns3__Result *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__Result), "ns3:Result"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__string(soap, "clusterName", -1, &(a->ns3__Result::clusterName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "farmName", -1, &(a->ns3__Result::farmName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "nodeName", -1, &(a->ns3__Result::nodeName), ""))
		return soap->error;
	if (soap_out_PointerTons2__Map(soap, "param", -1, &(a->ns3__Result::param), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "time", -1, &(a->ns3__Result::time), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__Result::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__Result(soap, this, tag, type);
}

SOAP_FMAC3 ns3__Result * SOAP_FMAC4 soap_get_ns3__Result(struct soap *soap, ns3__Result *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__Result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__Result::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__Result(soap, tag, this, type);
}

SOAP_FMAC3 ns3__Result * SOAP_FMAC4 soap_in_ns3__Result(struct soap *soap, const char *tag, ns3__Result *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__Result *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__Result, sizeof(ns3__Result), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__Result)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__Result *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_clusterName1 = 1, soap_flag_farmName1 = 1, soap_flag_nodeName1 = 1, soap_flag_param1 = 1, soap_flag_time1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_clusterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "clusterName", &(a->ns3__Result::clusterName), "xsd:string"))
				{	soap_flag_clusterName1--;
					continue;
				}
			if (soap_flag_farmName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "farmName", &(a->ns3__Result::farmName), "xsd:string"))
				{	soap_flag_farmName1--;
					continue;
				}
			if (soap_flag_nodeName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "nodeName", &(a->ns3__Result::nodeName), "xsd:string"))
				{	soap_flag_nodeName1--;
					continue;
				}
			if (soap_flag_param1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__Map(soap, "param", &(a->ns3__Result::param), "ns2:Map"))
				{	soap_flag_param1--;
					continue;
				}
			if (soap_flag_time1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "time", &(a->ns3__Result::time), "xsd:long"))
				{	soap_flag_time1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__Result *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__Result, 0, sizeof(ns3__Result), 0, soap_copy_ns3__Result);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_time1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns3__Result * SOAP_FMAC6 soap_new_ns3__Result(struct soap *soap, int n)
{	return soap_instantiate_ns3__Result(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns3__Result(struct soap *soap, ns3__Result *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns3__Result * SOAP_FMAC4 soap_instantiate_ns3__Result(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__Result(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__Result, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns3__Result;
		if (size)
			*size = sizeof(ns3__Result);
		((ns3__Result*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns3__Result[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__Result);
		for (int i = 0; i < n; i++)
			((ns3__Result*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__Result*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__Result(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__Result %p -> %p\n", q, p));
	*(ns3__Result*)p = *(ns3__Result*)q;
}

void ns2__Map::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons2__mapItem(soap, &this->ns2__Map::item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns2__Map::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons2__mapItem(soap, &this->ns2__Map::item);
	/* transient soap skipped */
}

int ns2__Map::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__Map);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__Map::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__Map(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Map(struct soap *soap, const char *tag, int id, const ns2__Map *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Map), "ns2:Map"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOfPointerTons2__mapItem(soap, "item", -1, &(a->ns2__Map::item), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__Map::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__Map(soap, this, tag, type);
}

SOAP_FMAC3 ns2__Map * SOAP_FMAC4 soap_get_ns2__Map(struct soap *soap, ns2__Map *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Map(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__Map::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__Map(soap, tag, this, type);
}

SOAP_FMAC3 ns2__Map * SOAP_FMAC4 soap_in_ns2__Map(struct soap *soap, const char *tag, ns2__Map *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__Map *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Map, sizeof(ns2__Map), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__Map)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__Map *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons2__mapItem(soap, "item", &(a->ns2__Map::item), "ns2:mapItem"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__Map *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Map, 0, sizeof(ns2__Map), 0, soap_copy_ns2__Map);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__Map * SOAP_FMAC6 soap_new_ns2__Map(struct soap *soap, int n)
{	return soap_instantiate_ns2__Map(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__Map(struct soap *soap, ns2__Map *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__Map * SOAP_FMAC4 soap_instantiate_ns2__Map(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__Map(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__Map, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns2__Map;
		if (size)
			*size = sizeof(ns2__Map);
		((ns2__Map*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__Map[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__Map);
		for (int i = 0; i < n; i++)
			((ns2__Map*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__Map*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Map(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__Map %p -> %p\n", q, p));
	*(ns2__Map*)p = *(ns2__Map*)q;
}

void ns2__mapItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns2__mapItem::key = NULL;
	this->ns2__mapItem::value = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns2__mapItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__anyType(soap, &this->ns2__mapItem::key);
	soap_serialize_PointerToxsd__anyType(soap, &this->ns2__mapItem::value);
	/* transient soap skipped */
}

int ns2__mapItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__mapItem);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__mapItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__mapItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__mapItem(struct soap *soap, const char *tag, int id, const ns2__mapItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__mapItem), "ns2:mapItem"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerToxsd__anyType(soap, "key", -1, &(a->ns2__mapItem::key), ""))
		return soap->error;
	if (soap_out_PointerToxsd__anyType(soap, "value", -1, &(a->ns2__mapItem::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__mapItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__mapItem(soap, this, tag, type);
}

SOAP_FMAC3 ns2__mapItem * SOAP_FMAC4 soap_get_ns2__mapItem(struct soap *soap, ns2__mapItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__mapItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__mapItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__mapItem(soap, tag, this, type);
}

SOAP_FMAC3 ns2__mapItem * SOAP_FMAC4 soap_in_ns2__mapItem(struct soap *soap, const char *tag, ns2__mapItem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__mapItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__mapItem, sizeof(ns2__mapItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__mapItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__mapItem *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag___item2 = 1, soap_flag_key1 = 1, soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_key1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__anyType(soap, "key", &(a->ns2__mapItem::key), "xsd:anyType"))
				{	soap_flag_key1--;
					continue;
				}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__anyType(soap, "value", &(a->ns2__mapItem::value), "xsd:anyType"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__mapItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__mapItem, 0, sizeof(ns2__mapItem), 0, soap_copy_ns2__mapItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__mapItem * SOAP_FMAC6 soap_new_ns2__mapItem(struct soap *soap, int n)
{	return soap_instantiate_ns2__mapItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__mapItem(struct soap *soap, ns2__mapItem *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__mapItem * SOAP_FMAC4 soap_instantiate_ns2__mapItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__mapItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__mapItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns2__mapItem;
		if (size)
			*size = sizeof(ns2__mapItem);
		((ns2__mapItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__mapItem[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__mapItem);
		for (int i = 0; i < n; i++)
			((ns2__mapItem*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__mapItem*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__mapItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__mapItem %p -> %p\n", q, p));
	*(ns2__mapItem*)p = *(ns2__mapItem*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void xsd__string::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->xsd__string::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__string::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->xsd__string::__item, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->xsd__string::__item);
	/* transient soap skipped */
}

int xsd__string::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__string::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const xsd__string *a, const char *type)
{
	return soap_out_std__string(soap, tag, id, &(a->xsd__string::__item), "xsd:string");
}

void *xsd__string::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, xsd__string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *xsd__string::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__string(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, xsd__string *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__string)
			return (xsd__string *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_std__string(soap, tag, &(a->xsd__string::__item), "xsd:string"))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__string * SOAP_FMAC6 soap_new_xsd__string(struct soap *soap, int n)
{	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__string(struct soap *soap, xsd__string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__string;
		if (size)
			*size = sizeof(xsd__string);
		((xsd__string*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__string);
		for (int i = 0; i < n; i++)
			((xsd__string*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__string %p -> %p\n", q, p));
	*(xsd__string*)p = *(xsd__string*)q;
}

void xsd__long::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->xsd__long::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__long::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__long::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__long);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__long::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__long(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const xsd__long *a, const char *type)
{
	return soap_out_LONG64(soap, tag, id, &(a->xsd__long::__item), "xsd:long");
}

void *xsd__long::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__long(soap, this, tag, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, xsd__long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *xsd__long::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__long(soap, tag, this, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, xsd__long *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__long *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__long, sizeof(xsd__long), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__long)
			return (xsd__long *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_LONG64(soap, tag, &(a->xsd__long::__item), "xsd:long"))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__long * SOAP_FMAC6 soap_new_xsd__long(struct soap *soap, int n)
{	return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__long(struct soap *soap, xsd__long *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_instantiate_xsd__long(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__long, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__long;
		if (size)
			*size = sizeof(xsd__long);
		((xsd__long*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__long[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__long);
		for (int i = 0; i < n; i++)
			((xsd__long*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__long*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__long(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__long %p -> %p\n", q, p));
	*(xsd__long*)p = *(xsd__long*)q;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	return soap_outliteral(soap, tag, &(a->xsd__anyType::__item), NULL);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyType)
			return (xsd__anyType *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(a->xsd__anyType::__item)))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__anyType * SOAP_FMAC6 soap_new_xsd__anyType(struct soap *soap, int n)
{	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__anyType(struct soap *soap, xsd__anyType *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:long"))
	{	cp->type = SOAP_TYPE_xsd__long;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__long;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__long);
			((xsd__long*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new xsd__long[n];
			if (size)
				*size = n * sizeof(xsd__long);
			for (int i = 0; i < n; i++)
				((xsd__long*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__long*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:string"))
	{	cp->type = SOAP_TYPE_xsd__string;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__string;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__string);
			((xsd__string*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new xsd__string[n];
			if (size)
				*size = n * sizeof(xsd__string);
			for (int i = 0; i < n; i++)
				((xsd__string*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__string*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns2:mapItem"))
	{	cp->type = SOAP_TYPE_ns2__mapItem;
		if (n < 0)
		{	cp->ptr = (void*)new ns2__mapItem;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns2__mapItem);
			((ns2__mapItem*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns2__mapItem[n];
			if (size)
				*size = n * sizeof(ns2__mapItem);
			for (int i = 0; i < n; i++)
				((ns2__mapItem*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns2__mapItem*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns2:Map"))
	{	cp->type = SOAP_TYPE_ns2__Map;
		if (n < 0)
		{	cp->ptr = (void*)new ns2__Map;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns2__Map);
			((ns2__Map*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns2__Map[n];
			if (size)
				*size = n * sizeof(ns2__Map);
			for (int i = 0; i < n; i++)
				((ns2__Map*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns2__Map*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:Result"))
	{	cp->type = SOAP_TYPE_ns3__Result;
		if (n < 0)
		{	cp->ptr = (void*)new ns3__Result;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns3__Result);
			((ns3__Result*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns3__Result[n];
			if (size)
				*size = n * sizeof(ns3__Result);
			for (int i = 0; i < n; i++)
				((ns3__Result*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns3__Result*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:WSNode"))
	{	cp->type = SOAP_TYPE_ns3__WSNode;
		if (n < 0)
		{	cp->ptr = (void*)new ns3__WSNode;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns3__WSNode);
			((ns3__WSNode*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns3__WSNode[n];
			if (size)
				*size = n * sizeof(ns3__WSNode);
			for (int i = 0; i < n; i++)
				((ns3__WSNode*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns3__WSNode*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:WSCluster"))
	{	cp->type = SOAP_TYPE_ns3__WSCluster;
		if (n < 0)
		{	cp->ptr = (void*)new ns3__WSCluster;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns3__WSCluster);
			((ns3__WSCluster*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns3__WSCluster[n];
			if (size)
				*size = n * sizeof(ns3__WSCluster);
			for (int i = 0; i < n; i++)
				((ns3__WSCluster*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns3__WSCluster*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:WSFarm"))
	{	cp->type = SOAP_TYPE_ns3__WSFarm;
		if (n < 0)
		{	cp->ptr = (void*)new ns3__WSFarm;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns3__WSFarm);
			((ns3__WSFarm*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns3__WSFarm[n];
			if (size)
				*size = n * sizeof(ns3__WSFarm);
			for (int i = 0; i < n; i++)
				((ns3__WSFarm*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns3__WSFarm*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:WSConf"))
	{	cp->type = SOAP_TYPE_ns3__WSConf;
		if (n < 0)
		{	cp->ptr = (void*)new ns3__WSConf;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns3__WSConf);
			((ns3__WSConf*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns3__WSConf[n];
			if (size)
				*size = n * sizeof(ns3__WSConf);
			for (int i = 0; i < n; i++)
				((ns3__WSConf*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns3__WSConf*)cp->ptr;
	}
	if (arrayType && !soap_match_tag(soap, arrayType, "ns3:Result"))
	{	cp->type = SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult;
		if (n < 0)
		{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREResult;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ArrayOf_USCOREtns1_USCOREResult);
			((ArrayOf_USCOREtns1_USCOREResult*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREResult[n];
			if (size)
				*size = n * sizeof(ArrayOf_USCOREtns1_USCOREResult);
			for (int i = 0; i < n; i++)
				((ArrayOf_USCOREtns1_USCOREResult*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ArrayOf_USCOREtns1_USCOREResult*)cp->ptr;
	}
	if (arrayType && !soap_match_tag(soap, arrayType, "xsd:string"))
	{	cp->type = SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring;
		if (n < 0)
		{	cp->ptr = (void*)new ArrayOf_USCORExsd_USCOREstring;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ArrayOf_USCORExsd_USCOREstring);
			((ArrayOf_USCORExsd_USCOREstring*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ArrayOf_USCORExsd_USCOREstring[n];
			if (size)
				*size = n * sizeof(ArrayOf_USCORExsd_USCOREstring);
			for (int i = 0; i < n; i++)
				((ArrayOf_USCORExsd_USCOREstring*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ArrayOf_USCORExsd_USCOREstring*)cp->ptr;
	}
	if (arrayType && !soap_match_tag(soap, arrayType, "ns3:WSNode"))
	{	cp->type = SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode;
		if (n < 0)
		{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSNode;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ArrayOf_USCOREtns1_USCOREWSNode);
			((ArrayOf_USCOREtns1_USCOREWSNode*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSNode[n];
			if (size)
				*size = n * sizeof(ArrayOf_USCOREtns1_USCOREWSNode);
			for (int i = 0; i < n; i++)
				((ArrayOf_USCOREtns1_USCOREWSNode*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ArrayOf_USCOREtns1_USCOREWSNode*)cp->ptr;
	}
	if (arrayType && !soap_match_tag(soap, arrayType, "ns3:WSCluster"))
	{	cp->type = SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster;
		if (n < 0)
		{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSCluster;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ArrayOf_USCOREtns1_USCOREWSCluster);
			((ArrayOf_USCOREtns1_USCOREWSCluster*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSCluster[n];
			if (size)
				*size = n * sizeof(ArrayOf_USCOREtns1_USCOREWSCluster);
			for (int i = 0; i < n; i++)
				((ArrayOf_USCOREtns1_USCOREWSCluster*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ArrayOf_USCOREtns1_USCOREWSCluster*)cp->ptr;
	}
	if (arrayType && !soap_match_tag(soap, arrayType, "ns3:WSConf"))
	{	cp->type = SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf;
		if (n < 0)
		{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSConf;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ArrayOf_USCOREtns1_USCOREWSConf);
			((ArrayOf_USCOREtns1_USCOREWSConf*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ArrayOf_USCOREtns1_USCOREWSConf[n];
			if (size)
				*size = n * sizeof(ArrayOf_USCOREtns1_USCOREWSConf);
			for (int i = 0; i < n; i++)
				((ArrayOf_USCOREtns1_USCOREWSConf*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ArrayOf_USCOREtns1_USCOREWSConf*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)new xsd__anyType;
		if (size)
			*size = sizeof(xsd__anyType);
		((xsd__anyType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__anyType[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyType);
		for (int i = 0; i < n; i++)
			((xsd__anyType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyType*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));
	*(xsd__anyType*)p = *(xsd__anyType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__networkMeasurementSet(struct soap *soap, struct ns3__networkMeasurementSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_in0 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__networkMeasurementSet(struct soap *soap, const struct ns3__networkMeasurementSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__Map(soap, &a->_in0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__networkMeasurementSet(struct soap *soap, const struct ns3__networkMeasurementSet *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns3__networkMeasurementSet);
	if (soap_out_ns3__networkMeasurementSet(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__networkMeasurementSet(struct soap *soap, const char *tag, int id, const struct ns3__networkMeasurementSet *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__networkMeasurementSet), type))
		return soap->error;
	if (soap_out_PointerTons2__Map(soap, "in0", -1, &a->_in0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__networkMeasurementSet * SOAP_FMAC4 soap_get_ns3__networkMeasurementSet(struct soap *soap, struct ns3__networkMeasurementSet *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__networkMeasurementSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns3__networkMeasurementSet * SOAP_FMAC4 soap_in_ns3__networkMeasurementSet(struct soap *soap, const char *tag, struct ns3__networkMeasurementSet *a, const char *type)
{
	short soap_flag__in0 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns3__networkMeasurementSet *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__networkMeasurementSet, sizeof(struct ns3__networkMeasurementSet), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__networkMeasurementSet(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__in0 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__Map(soap, NULL, &a->_in0, "ns2:Map"))
				{	soap_flag__in0--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns3__networkMeasurementSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__networkMeasurementSet, 0, sizeof(struct ns3__networkMeasurementSet), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns3__networkMeasurementSet * SOAP_FMAC6 soap_new_ns3__networkMeasurementSet(struct soap *soap, int n)
{	return soap_instantiate_ns3__networkMeasurementSet(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns3__networkMeasurementSet(struct soap *soap, struct ns3__networkMeasurementSet *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns3__networkMeasurementSet * SOAP_FMAC4 soap_instantiate_ns3__networkMeasurementSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__networkMeasurementSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__networkMeasurementSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns3__networkMeasurementSet;
		if (size)
			*size = sizeof(struct ns3__networkMeasurementSet);
	}
	else
	{	cp->ptr = (void*)new struct ns3__networkMeasurementSet[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns3__networkMeasurementSet);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns3__networkMeasurementSet*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__networkMeasurementSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns3__networkMeasurementSet %p -> %p\n", q, p));
	*(struct ns3__networkMeasurementSet*)p = *(struct ns3__networkMeasurementSet*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__networkMeasurementSetResponse(struct soap *soap, struct ns3__networkMeasurementSetResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_networkMeasurementSetReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__networkMeasurementSetResponse(struct soap *soap, const struct ns3__networkMeasurementSetResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__Map(soap, &a->_networkMeasurementSetReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__networkMeasurementSetResponse(struct soap *soap, const struct ns3__networkMeasurementSetResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns3__networkMeasurementSetResponse);
	if (soap_out_ns3__networkMeasurementSetResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__networkMeasurementSetResponse(struct soap *soap, const char *tag, int id, const struct ns3__networkMeasurementSetResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__networkMeasurementSetResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__Map(soap, "networkMeasurementSetReturn", -1, &a->_networkMeasurementSetReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__networkMeasurementSetResponse * SOAP_FMAC4 soap_get_ns3__networkMeasurementSetResponse(struct soap *soap, struct ns3__networkMeasurementSetResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__networkMeasurementSetResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns3__networkMeasurementSetResponse * SOAP_FMAC4 soap_in_ns3__networkMeasurementSetResponse(struct soap *soap, const char *tag, struct ns3__networkMeasurementSetResponse *a, const char *type)
{
	short soap_flag__networkMeasurementSetReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns3__networkMeasurementSetResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__networkMeasurementSetResponse, sizeof(struct ns3__networkMeasurementSetResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__networkMeasurementSetResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__networkMeasurementSetReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__Map(soap, NULL, &a->_networkMeasurementSetReturn, "ns2:Map"))
				{	soap_flag__networkMeasurementSetReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns3__networkMeasurementSetResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__networkMeasurementSetResponse, 0, sizeof(struct ns3__networkMeasurementSetResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns3__networkMeasurementSetResponse * SOAP_FMAC6 soap_new_ns3__networkMeasurementSetResponse(struct soap *soap, int n)
{	return soap_instantiate_ns3__networkMeasurementSetResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns3__networkMeasurementSetResponse(struct soap *soap, struct ns3__networkMeasurementSetResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns3__networkMeasurementSetResponse * SOAP_FMAC4 soap_instantiate_ns3__networkMeasurementSetResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__networkMeasurementSetResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__networkMeasurementSetResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns3__networkMeasurementSetResponse;
		if (size)
			*size = sizeof(struct ns3__networkMeasurementSetResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns3__networkMeasurementSetResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns3__networkMeasurementSetResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns3__networkMeasurementSetResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__networkMeasurementSetResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns3__networkMeasurementSetResponse %p -> %p\n", q, p));
	*(struct ns3__networkMeasurementSetResponse*)p = *(struct ns3__networkMeasurementSetResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFilteredLastValues(struct soap *soap, struct ns1__getFilteredLastValues *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_in0);
	soap_default_std__string(soap, &a->_in1);
	soap_default_std__string(soap, &a->_in2);
	soap_default_std__string(soap, &a->_in3);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFilteredLastValues(struct soap *soap, const struct ns1__getFilteredLastValues *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->_in0, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_in0);
	soap_embedded(soap, &a->_in1, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_in1);
	soap_embedded(soap, &a->_in2, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_in2);
	soap_embedded(soap, &a->_in3, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_in3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFilteredLastValues(struct soap *soap, const struct ns1__getFilteredLastValues *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getFilteredLastValues);
	if (soap_out_ns1__getFilteredLastValues(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFilteredLastValues(struct soap *soap, const char *tag, int id, const struct ns1__getFilteredLastValues *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getFilteredLastValues), type))
		return soap->error;
	if (soap_out_std__string(soap, "in0", -1, &a->_in0, ""))
		return soap->error;
	if (soap_out_std__string(soap, "in1", -1, &a->_in1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "in2", -1, &a->_in2, ""))
		return soap->error;
	if (soap_out_std__string(soap, "in3", -1, &a->_in3, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getFilteredLastValues * SOAP_FMAC4 soap_get_ns1__getFilteredLastValues(struct soap *soap, struct ns1__getFilteredLastValues *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getFilteredLastValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__getFilteredLastValues * SOAP_FMAC4 soap_in_ns1__getFilteredLastValues(struct soap *soap, const char *tag, struct ns1__getFilteredLastValues *a, const char *type)
{
	short soap_flag__in0 = 1, soap_flag__in1 = 1, soap_flag__in2 = 1, soap_flag__in3 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getFilteredLastValues *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getFilteredLastValues, sizeof(struct ns1__getFilteredLastValues), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__getFilteredLastValues(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__in0 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_in0, "xsd:string"))
				{	soap_flag__in0--;
					continue;
				}
			if (soap_flag__in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_in1, "xsd:string"))
				{	soap_flag__in1--;
					continue;
				}
			if (soap_flag__in2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_in2, "xsd:string"))
				{	soap_flag__in2--;
					continue;
				}
			if (soap_flag__in3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_in3, "xsd:string"))
				{	soap_flag__in3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getFilteredLastValues *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getFilteredLastValues, 0, sizeof(struct ns1__getFilteredLastValues), 0, soap_copy_ns1__getFilteredLastValues);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__in0 > 0 || soap_flag__in1 > 0 || soap_flag__in2 > 0 || soap_flag__in3 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__getFilteredLastValues * SOAP_FMAC6 soap_new_ns1__getFilteredLastValues(struct soap *soap, int n)
{	return soap_instantiate_ns1__getFilteredLastValues(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__getFilteredLastValues(struct soap *soap, struct ns1__getFilteredLastValues *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__getFilteredLastValues * SOAP_FMAC4 soap_instantiate_ns1__getFilteredLastValues(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getFilteredLastValues(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getFilteredLastValues, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__getFilteredLastValues;
		if (size)
			*size = sizeof(struct ns1__getFilteredLastValues);
	}
	else
	{	cp->ptr = (void*)new struct ns1__getFilteredLastValues[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getFilteredLastValues);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getFilteredLastValues*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFilteredLastValues(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getFilteredLastValues %p -> %p\n", q, p));
	*(struct ns1__getFilteredLastValues*)p = *(struct ns1__getFilteredLastValues*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFilteredLastValuesResponse(struct soap *soap, struct ns1__getFilteredLastValuesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_getFilteredLastValuesReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFilteredLastValuesResponse(struct soap *soap, const struct ns1__getFilteredLastValuesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToArrayOf_USCOREtns1_USCOREResult(soap, &a->_getFilteredLastValuesReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFilteredLastValuesResponse(struct soap *soap, const struct ns1__getFilteredLastValuesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getFilteredLastValuesResponse);
	if (soap_out_ns1__getFilteredLastValuesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFilteredLastValuesResponse(struct soap *soap, const char *tag, int id, const struct ns1__getFilteredLastValuesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getFilteredLastValuesResponse), type))
		return soap->error;
	if (soap_out_PointerToArrayOf_USCOREtns1_USCOREResult(soap, "getFilteredLastValuesReturn", -1, &a->_getFilteredLastValuesReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getFilteredLastValuesResponse * SOAP_FMAC4 soap_get_ns1__getFilteredLastValuesResponse(struct soap *soap, struct ns1__getFilteredLastValuesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getFilteredLastValuesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__getFilteredLastValuesResponse * SOAP_FMAC4 soap_in_ns1__getFilteredLastValuesResponse(struct soap *soap, const char *tag, struct ns1__getFilteredLastValuesResponse *a, const char *type)
{
	short soap_flag__getFilteredLastValuesReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getFilteredLastValuesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getFilteredLastValuesResponse, sizeof(struct ns1__getFilteredLastValuesResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__getFilteredLastValuesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__getFilteredLastValuesReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToArrayOf_USCOREtns1_USCOREResult(soap, NULL, &a->_getFilteredLastValuesReturn, "ns3:Result"))
				{	soap_flag__getFilteredLastValuesReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getFilteredLastValuesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getFilteredLastValuesResponse, 0, sizeof(struct ns1__getFilteredLastValuesResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__getFilteredLastValuesResponse * SOAP_FMAC6 soap_new_ns1__getFilteredLastValuesResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__getFilteredLastValuesResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__getFilteredLastValuesResponse(struct soap *soap, struct ns1__getFilteredLastValuesResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__getFilteredLastValuesResponse * SOAP_FMAC4 soap_instantiate_ns1__getFilteredLastValuesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getFilteredLastValuesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getFilteredLastValuesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__getFilteredLastValuesResponse;
		if (size)
			*size = sizeof(struct ns1__getFilteredLastValuesResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__getFilteredLastValuesResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getFilteredLastValuesResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getFilteredLastValuesResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFilteredLastValuesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getFilteredLastValuesResponse %p -> %p\n", q, p));
	*(struct ns1__getFilteredLastValuesResponse*)p = *(struct ns1__getFilteredLastValuesResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLastValues(struct soap *soap, struct ns1__getLastValues *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLastValues(struct soap *soap, const struct ns1__getLastValues *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLastValues(struct soap *soap, const struct ns1__getLastValues *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getLastValues);
	if (soap_out_ns1__getLastValues(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLastValues(struct soap *soap, const char *tag, int id, const struct ns1__getLastValues *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getLastValues), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getLastValues * SOAP_FMAC4 soap_get_ns1__getLastValues(struct soap *soap, struct ns1__getLastValues *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getLastValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__getLastValues * SOAP_FMAC4 soap_in_ns1__getLastValues(struct soap *soap, const char *tag, struct ns1__getLastValues *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getLastValues *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getLastValues, sizeof(struct ns1__getLastValues), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__getLastValues(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getLastValues *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getLastValues, 0, sizeof(struct ns1__getLastValues), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__getLastValues * SOAP_FMAC6 soap_new_ns1__getLastValues(struct soap *soap, int n)
{	return soap_instantiate_ns1__getLastValues(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__getLastValues(struct soap *soap, struct ns1__getLastValues *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__getLastValues * SOAP_FMAC4 soap_instantiate_ns1__getLastValues(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getLastValues(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getLastValues, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__getLastValues;
		if (size)
			*size = sizeof(struct ns1__getLastValues);
	}
	else
	{	cp->ptr = (void*)new struct ns1__getLastValues[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getLastValues);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getLastValues*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getLastValues(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getLastValues %p -> %p\n", q, p));
	*(struct ns1__getLastValues*)p = *(struct ns1__getLastValues*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLastValuesResponse(struct soap *soap, struct ns1__getLastValuesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->getLastValuesReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLastValuesResponse(struct soap *soap, const struct ns1__getLastValuesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToArrayOf_USCOREtns1_USCOREResult(soap, &a->getLastValuesReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLastValuesResponse(struct soap *soap, const struct ns1__getLastValuesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getLastValuesResponse);
	if (soap_out_ns1__getLastValuesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLastValuesResponse(struct soap *soap, const char *tag, int id, const struct ns1__getLastValuesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getLastValuesResponse), type))
		return soap->error;
	if (soap_out_PointerToArrayOf_USCOREtns1_USCOREResult(soap, "getLastValuesReturn", -1, &a->getLastValuesReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getLastValuesResponse * SOAP_FMAC4 soap_get_ns1__getLastValuesResponse(struct soap *soap, struct ns1__getLastValuesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getLastValuesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__getLastValuesResponse * SOAP_FMAC4 soap_in_ns1__getLastValuesResponse(struct soap *soap, const char *tag, struct ns1__getLastValuesResponse *a, const char *type)
{
	short soap_flag_getLastValuesReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getLastValuesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getLastValuesResponse, sizeof(struct ns1__getLastValuesResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__getLastValuesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getLastValuesReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToArrayOf_USCOREtns1_USCOREResult(soap, "getLastValuesReturn", &a->getLastValuesReturn, "ns3:Result"))
				{	soap_flag_getLastValuesReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getLastValuesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getLastValuesResponse, 0, sizeof(struct ns1__getLastValuesResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__getLastValuesResponse * SOAP_FMAC6 soap_new_ns1__getLastValuesResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__getLastValuesResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__getLastValuesResponse(struct soap *soap, struct ns1__getLastValuesResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__getLastValuesResponse * SOAP_FMAC4 soap_instantiate_ns1__getLastValuesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getLastValuesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getLastValuesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__getLastValuesResponse;
		if (size)
			*size = sizeof(struct ns1__getLastValuesResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__getLastValuesResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getLastValuesResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getLastValuesResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getLastValuesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getLastValuesResponse %p -> %p\n", q, p));
	*(struct ns1__getLastValuesResponse*)p = *(struct ns1__getLastValuesResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLatestConfiguration(struct soap *soap, struct ns1__getLatestConfiguration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_in0);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLatestConfiguration(struct soap *soap, const struct ns1__getLatestConfiguration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->_in0, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_in0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLatestConfiguration(struct soap *soap, const struct ns1__getLatestConfiguration *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getLatestConfiguration);
	if (soap_out_ns1__getLatestConfiguration(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLatestConfiguration(struct soap *soap, const char *tag, int id, const struct ns1__getLatestConfiguration *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getLatestConfiguration), type))
		return soap->error;
	if (soap_out_std__string(soap, "in0", -1, &a->_in0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getLatestConfiguration * SOAP_FMAC4 soap_get_ns1__getLatestConfiguration(struct soap *soap, struct ns1__getLatestConfiguration *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getLatestConfiguration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__getLatestConfiguration * SOAP_FMAC4 soap_in_ns1__getLatestConfiguration(struct soap *soap, const char *tag, struct ns1__getLatestConfiguration *a, const char *type)
{
	short soap_flag__in0 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getLatestConfiguration *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getLatestConfiguration, sizeof(struct ns1__getLatestConfiguration), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__getLatestConfiguration(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__in0 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_in0, "xsd:string"))
				{	soap_flag__in0--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getLatestConfiguration *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getLatestConfiguration, 0, sizeof(struct ns1__getLatestConfiguration), 0, soap_copy_ns1__getLatestConfiguration);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__in0 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__getLatestConfiguration * SOAP_FMAC6 soap_new_ns1__getLatestConfiguration(struct soap *soap, int n)
{	return soap_instantiate_ns1__getLatestConfiguration(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__getLatestConfiguration(struct soap *soap, struct ns1__getLatestConfiguration *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__getLatestConfiguration * SOAP_FMAC4 soap_instantiate_ns1__getLatestConfiguration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getLatestConfiguration(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getLatestConfiguration, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__getLatestConfiguration;
		if (size)
			*size = sizeof(struct ns1__getLatestConfiguration);
	}
	else
	{	cp->ptr = (void*)new struct ns1__getLatestConfiguration[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getLatestConfiguration);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getLatestConfiguration*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getLatestConfiguration(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getLatestConfiguration %p -> %p\n", q, p));
	*(struct ns1__getLatestConfiguration*)p = *(struct ns1__getLatestConfiguration*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLatestConfigurationResponse(struct soap *soap, struct ns1__getLatestConfigurationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_getLatestConfigurationReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLatestConfigurationResponse(struct soap *soap, const struct ns1__getLatestConfigurationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToArrayOf_USCOREtns1_USCOREWSConf(soap, &a->_getLatestConfigurationReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLatestConfigurationResponse(struct soap *soap, const struct ns1__getLatestConfigurationResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getLatestConfigurationResponse);
	if (soap_out_ns1__getLatestConfigurationResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLatestConfigurationResponse(struct soap *soap, const char *tag, int id, const struct ns1__getLatestConfigurationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getLatestConfigurationResponse), type))
		return soap->error;
	if (soap_out_PointerToArrayOf_USCOREtns1_USCOREWSConf(soap, "getLatestConfigurationReturn", -1, &a->_getLatestConfigurationReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getLatestConfigurationResponse * SOAP_FMAC4 soap_get_ns1__getLatestConfigurationResponse(struct soap *soap, struct ns1__getLatestConfigurationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getLatestConfigurationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__getLatestConfigurationResponse * SOAP_FMAC4 soap_in_ns1__getLatestConfigurationResponse(struct soap *soap, const char *tag, struct ns1__getLatestConfigurationResponse *a, const char *type)
{
	short soap_flag__getLatestConfigurationReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getLatestConfigurationResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getLatestConfigurationResponse, sizeof(struct ns1__getLatestConfigurationResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__getLatestConfigurationResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__getLatestConfigurationReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToArrayOf_USCOREtns1_USCOREWSConf(soap, NULL, &a->_getLatestConfigurationReturn, "ns3:WSConf"))
				{	soap_flag__getLatestConfigurationReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getLatestConfigurationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getLatestConfigurationResponse, 0, sizeof(struct ns1__getLatestConfigurationResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__getLatestConfigurationResponse * SOAP_FMAC6 soap_new_ns1__getLatestConfigurationResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__getLatestConfigurationResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__getLatestConfigurationResponse(struct soap *soap, struct ns1__getLatestConfigurationResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__getLatestConfigurationResponse * SOAP_FMAC4 soap_instantiate_ns1__getLatestConfigurationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getLatestConfigurationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getLatestConfigurationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__getLatestConfigurationResponse;
		if (size)
			*size = sizeof(struct ns1__getLatestConfigurationResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__getLatestConfigurationResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getLatestConfigurationResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getLatestConfigurationResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getLatestConfigurationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getLatestConfigurationResponse %p -> %p\n", q, p));
	*(struct ns1__getLatestConfigurationResponse*)p = *(struct ns1__getLatestConfigurationResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getConfiguration(struct soap *soap, struct ns1__getConfiguration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->_in0);
	soap_default_LONG64(soap, &a->_in1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getConfiguration(struct soap *soap, const struct ns1__getConfiguration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getConfiguration(struct soap *soap, const struct ns1__getConfiguration *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getConfiguration);
	if (soap_out_ns1__getConfiguration(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getConfiguration(struct soap *soap, const char *tag, int id, const struct ns1__getConfiguration *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getConfiguration), type))
		return soap->error;
	if (soap_out_LONG64(soap, "in0", -1, &a->_in0, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "in1", -1, &a->_in1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getConfiguration * SOAP_FMAC4 soap_get_ns1__getConfiguration(struct soap *soap, struct ns1__getConfiguration *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getConfiguration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__getConfiguration * SOAP_FMAC4 soap_in_ns1__getConfiguration(struct soap *soap, const char *tag, struct ns1__getConfiguration *a, const char *type)
{
	short soap_flag__in0 = 1, soap_flag__in1 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getConfiguration *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getConfiguration, sizeof(struct ns1__getConfiguration), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__getConfiguration(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__in0 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_in0, "xsd:long"))
				{	soap_flag__in0--;
					continue;
				}
			if (soap_flag__in1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_in1, "xsd:long"))
				{	soap_flag__in1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getConfiguration *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getConfiguration, 0, sizeof(struct ns1__getConfiguration), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__in0 > 0 || soap_flag__in1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__getConfiguration * SOAP_FMAC6 soap_new_ns1__getConfiguration(struct soap *soap, int n)
{	return soap_instantiate_ns1__getConfiguration(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__getConfiguration(struct soap *soap, struct ns1__getConfiguration *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__getConfiguration * SOAP_FMAC4 soap_instantiate_ns1__getConfiguration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getConfiguration(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getConfiguration, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__getConfiguration;
		if (size)
			*size = sizeof(struct ns1__getConfiguration);
	}
	else
	{	cp->ptr = (void*)new struct ns1__getConfiguration[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getConfiguration);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getConfiguration*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getConfiguration(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getConfiguration %p -> %p\n", q, p));
	*(struct ns1__getConfiguration*)p = *(struct ns1__getConfiguration*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getConfigurationResponse(struct soap *soap, struct ns1__getConfigurationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_getConfigurationReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getConfigurationResponse(struct soap *soap, const struct ns1__getConfigurationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToArrayOf_USCOREtns1_USCOREWSConf(soap, &a->_getConfigurationReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getConfigurationResponse(struct soap *soap, const struct ns1__getConfigurationResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getConfigurationResponse);
	if (soap_out_ns1__getConfigurationResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getConfigurationResponse(struct soap *soap, const char *tag, int id, const struct ns1__getConfigurationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getConfigurationResponse), type))
		return soap->error;
	if (soap_out_PointerToArrayOf_USCOREtns1_USCOREWSConf(soap, "getConfigurationReturn", -1, &a->_getConfigurationReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getConfigurationResponse * SOAP_FMAC4 soap_get_ns1__getConfigurationResponse(struct soap *soap, struct ns1__getConfigurationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getConfigurationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__getConfigurationResponse * SOAP_FMAC4 soap_in_ns1__getConfigurationResponse(struct soap *soap, const char *tag, struct ns1__getConfigurationResponse *a, const char *type)
{
	short soap_flag__getConfigurationReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getConfigurationResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getConfigurationResponse, sizeof(struct ns1__getConfigurationResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__getConfigurationResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__getConfigurationReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToArrayOf_USCOREtns1_USCOREWSConf(soap, NULL, &a->_getConfigurationReturn, "ns3:WSConf"))
				{	soap_flag__getConfigurationReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getConfigurationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getConfigurationResponse, 0, sizeof(struct ns1__getConfigurationResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__getConfigurationResponse * SOAP_FMAC6 soap_new_ns1__getConfigurationResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__getConfigurationResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__getConfigurationResponse(struct soap *soap, struct ns1__getConfigurationResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__getConfigurationResponse * SOAP_FMAC4 soap_instantiate_ns1__getConfigurationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getConfigurationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getConfigurationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__getConfigurationResponse;
		if (size)
			*size = sizeof(struct ns1__getConfigurationResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__getConfigurationResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getConfigurationResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getConfigurationResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getConfigurationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getConfigurationResponse %p -> %p\n", q, p));
	*(struct ns1__getConfigurationResponse*)p = *(struct ns1__getConfigurationResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getValues(struct soap *soap, struct ns1__getValues *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_in0);
	soap_default_std__string(soap, &a->_in1);
	soap_default_std__string(soap, &a->_in2);
	soap_default_std__string(soap, &a->_in3);
	soap_default_LONG64(soap, &a->_in4);
	soap_default_LONG64(soap, &a->_in5);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getValues(struct soap *soap, const struct ns1__getValues *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->_in0, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_in0);
	soap_embedded(soap, &a->_in1, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_in1);
	soap_embedded(soap, &a->_in2, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_in2);
	soap_embedded(soap, &a->_in3, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_in3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getValues(struct soap *soap, const struct ns1__getValues *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getValues);
	if (soap_out_ns1__getValues(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getValues(struct soap *soap, const char *tag, int id, const struct ns1__getValues *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getValues), type))
		return soap->error;
	if (soap_out_std__string(soap, "in0", -1, &a->_in0, ""))
		return soap->error;
	if (soap_out_std__string(soap, "in1", -1, &a->_in1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "in2", -1, &a->_in2, ""))
		return soap->error;
	if (soap_out_std__string(soap, "in3", -1, &a->_in3, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "in4", -1, &a->_in4, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "in5", -1, &a->_in5, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getValues * SOAP_FMAC4 soap_get_ns1__getValues(struct soap *soap, struct ns1__getValues *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__getValues * SOAP_FMAC4 soap_in_ns1__getValues(struct soap *soap, const char *tag, struct ns1__getValues *a, const char *type)
{
	short soap_flag__in0 = 1, soap_flag__in1 = 1, soap_flag__in2 = 1, soap_flag__in3 = 1, soap_flag__in4 = 1, soap_flag__in5 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getValues *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getValues, sizeof(struct ns1__getValues), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__getValues(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__in0 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_in0, "xsd:string"))
				{	soap_flag__in0--;
					continue;
				}
			if (soap_flag__in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_in1, "xsd:string"))
				{	soap_flag__in1--;
					continue;
				}
			if (soap_flag__in2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_in2, "xsd:string"))
				{	soap_flag__in2--;
					continue;
				}
			if (soap_flag__in3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_in3, "xsd:string"))
				{	soap_flag__in3--;
					continue;
				}
			if (soap_flag__in4 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_in4, "xsd:long"))
				{	soap_flag__in4--;
					continue;
				}
			if (soap_flag__in5 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_in5, "xsd:long"))
				{	soap_flag__in5--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getValues *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getValues, 0, sizeof(struct ns1__getValues), 0, soap_copy_ns1__getValues);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__in0 > 0 || soap_flag__in1 > 0 || soap_flag__in2 > 0 || soap_flag__in3 > 0 || soap_flag__in4 > 0 || soap_flag__in5 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__getValues * SOAP_FMAC6 soap_new_ns1__getValues(struct soap *soap, int n)
{	return soap_instantiate_ns1__getValues(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__getValues(struct soap *soap, struct ns1__getValues *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__getValues * SOAP_FMAC4 soap_instantiate_ns1__getValues(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getValues(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getValues, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__getValues;
		if (size)
			*size = sizeof(struct ns1__getValues);
	}
	else
	{	cp->ptr = (void*)new struct ns1__getValues[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getValues);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getValues*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getValues(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getValues %p -> %p\n", q, p));
	*(struct ns1__getValues*)p = *(struct ns1__getValues*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getValuesResponse(struct soap *soap, struct ns1__getValuesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_getValuesReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getValuesResponse(struct soap *soap, const struct ns1__getValuesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToArrayOf_USCOREtns1_USCOREResult(soap, &a->_getValuesReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getValuesResponse(struct soap *soap, const struct ns1__getValuesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getValuesResponse);
	if (soap_out_ns1__getValuesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getValuesResponse(struct soap *soap, const char *tag, int id, const struct ns1__getValuesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getValuesResponse), type))
		return soap->error;
	if (soap_out_PointerToArrayOf_USCOREtns1_USCOREResult(soap, "getValuesReturn", -1, &a->_getValuesReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getValuesResponse * SOAP_FMAC4 soap_get_ns1__getValuesResponse(struct soap *soap, struct ns1__getValuesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getValuesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__getValuesResponse * SOAP_FMAC4 soap_in_ns1__getValuesResponse(struct soap *soap, const char *tag, struct ns1__getValuesResponse *a, const char *type)
{
	short soap_flag__getValuesReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getValuesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getValuesResponse, sizeof(struct ns1__getValuesResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__getValuesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__getValuesReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToArrayOf_USCOREtns1_USCOREResult(soap, NULL, &a->_getValuesReturn, "ns3:Result"))
				{	soap_flag__getValuesReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getValuesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getValuesResponse, 0, sizeof(struct ns1__getValuesResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__getValuesResponse * SOAP_FMAC6 soap_new_ns1__getValuesResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__getValuesResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__getValuesResponse(struct soap *soap, struct ns1__getValuesResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__getValuesResponse * SOAP_FMAC4 soap_instantiate_ns1__getValuesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getValuesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getValuesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__getValuesResponse;
		if (size)
			*size = sizeof(struct ns1__getValuesResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__getValuesResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__getValuesResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__getValuesResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getValuesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getValuesResponse %p -> %p\n", q, p));
	*(struct ns1__getValuesResponse*)p = *(struct ns1__getValuesResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSConf *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSConf *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSConf);
	if (soap_out_PointerToArrayOf_USCOREtns1_USCOREWSConf(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, const char *tag, int id, ArrayOf_USCOREtns1_USCOREWSConf *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSConf ** SOAP_FMAC4 soap_get_PointerToArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSConf **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToArrayOf_USCOREtns1_USCOREWSConf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSConf ** SOAP_FMAC4 soap_in_PointerToArrayOf_USCOREtns1_USCOREWSConf(struct soap *soap, const char *tag, ArrayOf_USCOREtns1_USCOREWSConf **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ArrayOf_USCOREtns1_USCOREWSConf **)soap_malloc(soap, sizeof(ArrayOf_USCOREtns1_USCOREWSConf *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ArrayOf_USCOREtns1_USCOREWSConf *)soap_instantiate_ArrayOf_USCOREtns1_USCOREWSConf(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ArrayOf_USCOREtns1_USCOREWSConf ** p = (ArrayOf_USCOREtns1_USCOREWSConf **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf, sizeof(ArrayOf_USCOREtns1_USCOREWSConf), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOf_USCOREtns1_USCOREResult(struct soap *soap, ArrayOf_USCOREtns1_USCOREResult *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOf_USCOREtns1_USCOREResult(struct soap *soap, ArrayOf_USCOREtns1_USCOREResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREResult);
	if (soap_out_PointerToArrayOf_USCOREtns1_USCOREResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOf_USCOREtns1_USCOREResult(struct soap *soap, const char *tag, int id, ArrayOf_USCOREtns1_USCOREResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREResult ** SOAP_FMAC4 soap_get_PointerToArrayOf_USCOREtns1_USCOREResult(struct soap *soap, ArrayOf_USCOREtns1_USCOREResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToArrayOf_USCOREtns1_USCOREResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREResult ** SOAP_FMAC4 soap_in_PointerToArrayOf_USCOREtns1_USCOREResult(struct soap *soap, const char *tag, ArrayOf_USCOREtns1_USCOREResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ArrayOf_USCOREtns1_USCOREResult **)soap_malloc(soap, sizeof(ArrayOf_USCOREtns1_USCOREResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ArrayOf_USCOREtns1_USCOREResult *)soap_instantiate_ArrayOf_USCOREtns1_USCOREResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ArrayOf_USCOREtns1_USCOREResult ** p = (ArrayOf_USCOREtns1_USCOREResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult, sizeof(ArrayOf_USCOREtns1_USCOREResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__WSConf(struct soap *soap, ns3__WSConf **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons3__WSConf))
		soap_serialize_PointerTons3__WSConf(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__WSConf(struct soap *soap, ns3__WSConf **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons3__WSConf);
	if (soap_out_PointerToPointerTons3__WSConf(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__WSConf(struct soap *soap, const char *tag, int id, ns3__WSConf **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons3__WSConf);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons3__WSConf(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns3__WSConf *** SOAP_FMAC4 soap_get_PointerToPointerTons3__WSConf(struct soap *soap, ns3__WSConf ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons3__WSConf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__WSConf *** SOAP_FMAC4 soap_in_PointerToPointerTons3__WSConf(struct soap *soap, const char *tag, ns3__WSConf ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__WSConf ***)soap_malloc(soap, sizeof(ns3__WSConf **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons3__WSConf(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns3__WSConf ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons3__WSConf, sizeof(ns3__WSConf *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__WSConf(struct soap *soap, ns3__WSConf *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__WSConf))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__WSConf(struct soap *soap, ns3__WSConf *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__WSConf);
	if (soap_out_PointerTons3__WSConf(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__WSConf(struct soap *soap, const char *tag, int id, ns3__WSConf *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__WSConf);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__WSConf ** SOAP_FMAC4 soap_get_PointerTons3__WSConf(struct soap *soap, ns3__WSConf **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__WSConf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__WSConf ** SOAP_FMAC4 soap_in_PointerTons3__WSConf(struct soap *soap, const char *tag, ns3__WSConf **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__WSConf **)soap_malloc(soap, sizeof(ns3__WSConf *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__WSConf *)soap_instantiate_ns3__WSConf(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__WSConf ** p = (ns3__WSConf **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__WSConf, sizeof(ns3__WSConf), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__WSCluster(struct soap *soap, ns3__WSCluster **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons3__WSCluster))
		soap_serialize_PointerTons3__WSCluster(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__WSCluster(struct soap *soap, ns3__WSCluster **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons3__WSCluster);
	if (soap_out_PointerToPointerTons3__WSCluster(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__WSCluster(struct soap *soap, const char *tag, int id, ns3__WSCluster **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons3__WSCluster);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons3__WSCluster(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns3__WSCluster *** SOAP_FMAC4 soap_get_PointerToPointerTons3__WSCluster(struct soap *soap, ns3__WSCluster ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons3__WSCluster(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__WSCluster *** SOAP_FMAC4 soap_in_PointerToPointerTons3__WSCluster(struct soap *soap, const char *tag, ns3__WSCluster ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__WSCluster ***)soap_malloc(soap, sizeof(ns3__WSCluster **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons3__WSCluster(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns3__WSCluster ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons3__WSCluster, sizeof(ns3__WSCluster *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__WSCluster(struct soap *soap, ns3__WSCluster *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__WSCluster))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__WSCluster(struct soap *soap, ns3__WSCluster *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__WSCluster);
	if (soap_out_PointerTons3__WSCluster(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__WSCluster(struct soap *soap, const char *tag, int id, ns3__WSCluster *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__WSCluster);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__WSCluster ** SOAP_FMAC4 soap_get_PointerTons3__WSCluster(struct soap *soap, ns3__WSCluster **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__WSCluster(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__WSCluster ** SOAP_FMAC4 soap_in_PointerTons3__WSCluster(struct soap *soap, const char *tag, ns3__WSCluster **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__WSCluster **)soap_malloc(soap, sizeof(ns3__WSCluster *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__WSCluster *)soap_instantiate_ns3__WSCluster(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__WSCluster ** p = (ns3__WSCluster **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__WSCluster, sizeof(ns3__WSCluster), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__WSNode(struct soap *soap, ns3__WSNode **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons3__WSNode))
		soap_serialize_PointerTons3__WSNode(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__WSNode(struct soap *soap, ns3__WSNode **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons3__WSNode);
	if (soap_out_PointerToPointerTons3__WSNode(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__WSNode(struct soap *soap, const char *tag, int id, ns3__WSNode **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons3__WSNode);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons3__WSNode(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns3__WSNode *** SOAP_FMAC4 soap_get_PointerToPointerTons3__WSNode(struct soap *soap, ns3__WSNode ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons3__WSNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__WSNode *** SOAP_FMAC4 soap_in_PointerToPointerTons3__WSNode(struct soap *soap, const char *tag, ns3__WSNode ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__WSNode ***)soap_malloc(soap, sizeof(ns3__WSNode **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons3__WSNode(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns3__WSNode ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons3__WSNode, sizeof(ns3__WSNode *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__WSNode(struct soap *soap, ns3__WSNode *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__WSNode))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__WSNode(struct soap *soap, ns3__WSNode *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__WSNode);
	if (soap_out_PointerTons3__WSNode(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__WSNode(struct soap *soap, const char *tag, int id, ns3__WSNode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__WSNode);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__WSNode ** SOAP_FMAC4 soap_get_PointerTons3__WSNode(struct soap *soap, ns3__WSNode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__WSNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__WSNode ** SOAP_FMAC4 soap_in_PointerTons3__WSNode(struct soap *soap, const char *tag, ns3__WSNode **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__WSNode **)soap_malloc(soap, sizeof(ns3__WSNode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__WSNode *)soap_instantiate_ns3__WSNode(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__WSNode ** p = (ns3__WSNode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__WSNode, sizeof(ns3__WSNode), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__Result(struct soap *soap, ns3__Result **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons3__Result))
		soap_serialize_PointerTons3__Result(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__Result(struct soap *soap, ns3__Result **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons3__Result);
	if (soap_out_PointerToPointerTons3__Result(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__Result(struct soap *soap, const char *tag, int id, ns3__Result **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons3__Result);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons3__Result(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns3__Result *** SOAP_FMAC4 soap_get_PointerToPointerTons3__Result(struct soap *soap, ns3__Result ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons3__Result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__Result *** SOAP_FMAC4 soap_in_PointerToPointerTons3__Result(struct soap *soap, const char *tag, ns3__Result ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__Result ***)soap_malloc(soap, sizeof(ns3__Result **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons3__Result(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns3__Result ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons3__Result, sizeof(ns3__Result *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Result(struct soap *soap, ns3__Result *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__Result))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Result(struct soap *soap, ns3__Result *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__Result);
	if (soap_out_PointerTons3__Result(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Result(struct soap *soap, const char *tag, int id, ns3__Result *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__Result);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__Result ** SOAP_FMAC4 soap_get_PointerTons3__Result(struct soap *soap, ns3__Result **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__Result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__Result ** SOAP_FMAC4 soap_in_PointerTons3__Result(struct soap *soap, const char *tag, ns3__Result **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__Result **)soap_malloc(soap, sizeof(ns3__Result *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__Result *)soap_instantiate_ns3__Result(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__Result ** p = (ns3__Result **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__Result, sizeof(ns3__Result), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__WSFarm(struct soap *soap, ns3__WSFarm *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__WSFarm))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__WSFarm(struct soap *soap, ns3__WSFarm *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__WSFarm);
	if (soap_out_PointerTons3__WSFarm(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__WSFarm(struct soap *soap, const char *tag, int id, ns3__WSFarm *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__WSFarm);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__WSFarm ** SOAP_FMAC4 soap_get_PointerTons3__WSFarm(struct soap *soap, ns3__WSFarm **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__WSFarm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__WSFarm ** SOAP_FMAC4 soap_in_PointerTons3__WSFarm(struct soap *soap, const char *tag, ns3__WSFarm **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__WSFarm **)soap_malloc(soap, sizeof(ns3__WSFarm *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__WSFarm *)soap_instantiate_ns3__WSFarm(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__WSFarm ** p = (ns3__WSFarm **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__WSFarm, sizeof(ns3__WSFarm), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSCluster *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSCluster *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSCluster);
	if (soap_out_PointerToArrayOf_USCOREtns1_USCOREWSCluster(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, const char *tag, int id, ArrayOf_USCOREtns1_USCOREWSCluster *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSCluster ** SOAP_FMAC4 soap_get_PointerToArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSCluster **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToArrayOf_USCOREtns1_USCOREWSCluster(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSCluster ** SOAP_FMAC4 soap_in_PointerToArrayOf_USCOREtns1_USCOREWSCluster(struct soap *soap, const char *tag, ArrayOf_USCOREtns1_USCOREWSCluster **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ArrayOf_USCOREtns1_USCOREWSCluster **)soap_malloc(soap, sizeof(ArrayOf_USCOREtns1_USCOREWSCluster *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ArrayOf_USCOREtns1_USCOREWSCluster *)soap_instantiate_ArrayOf_USCOREtns1_USCOREWSCluster(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ArrayOf_USCOREtns1_USCOREWSCluster ** p = (ArrayOf_USCOREtns1_USCOREWSCluster **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster, sizeof(ArrayOf_USCOREtns1_USCOREWSCluster), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSNode *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSNode *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToArrayOf_USCOREtns1_USCOREWSNode);
	if (soap_out_PointerToArrayOf_USCOREtns1_USCOREWSNode(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, const char *tag, int id, ArrayOf_USCOREtns1_USCOREWSNode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSNode ** SOAP_FMAC4 soap_get_PointerToArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, ArrayOf_USCOREtns1_USCOREWSNode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToArrayOf_USCOREtns1_USCOREWSNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ArrayOf_USCOREtns1_USCOREWSNode ** SOAP_FMAC4 soap_in_PointerToArrayOf_USCOREtns1_USCOREWSNode(struct soap *soap, const char *tag, ArrayOf_USCOREtns1_USCOREWSNode **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ArrayOf_USCOREtns1_USCOREWSNode **)soap_malloc(soap, sizeof(ArrayOf_USCOREtns1_USCOREWSNode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ArrayOf_USCOREtns1_USCOREWSNode *)soap_instantiate_ArrayOf_USCOREtns1_USCOREWSNode(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ArrayOf_USCOREtns1_USCOREWSNode ** p = (ArrayOf_USCOREtns1_USCOREWSNode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode, sizeof(ArrayOf_USCOREtns1_USCOREWSNode), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOf_USCORExsd_USCOREstring(struct soap *soap, ArrayOf_USCORExsd_USCOREstring *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOf_USCORExsd_USCOREstring(struct soap *soap, ArrayOf_USCORExsd_USCOREstring *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToArrayOf_USCORExsd_USCOREstring);
	if (soap_out_PointerToArrayOf_USCORExsd_USCOREstring(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOf_USCORExsd_USCOREstring(struct soap *soap, const char *tag, int id, ArrayOf_USCORExsd_USCOREstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ArrayOf_USCORExsd_USCOREstring ** SOAP_FMAC4 soap_get_PointerToArrayOf_USCORExsd_USCOREstring(struct soap *soap, ArrayOf_USCORExsd_USCOREstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToArrayOf_USCORExsd_USCOREstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ArrayOf_USCORExsd_USCOREstring ** SOAP_FMAC4 soap_in_PointerToArrayOf_USCORExsd_USCOREstring(struct soap *soap, const char *tag, ArrayOf_USCORExsd_USCOREstring **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ArrayOf_USCORExsd_USCOREstring **)soap_malloc(soap, sizeof(ArrayOf_USCORExsd_USCOREstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ArrayOf_USCORExsd_USCOREstring *)soap_instantiate_ArrayOf_USCORExsd_USCOREstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ArrayOf_USCORExsd_USCOREstring ** p = (ArrayOf_USCORExsd_USCOREstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring, sizeof(ArrayOf_USCORExsd_USCOREstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Map(struct soap *soap, ns2__Map *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__Map))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Map(struct soap *soap, ns2__Map *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__Map);
	if (soap_out_PointerTons2__Map(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Map(struct soap *soap, const char *tag, int id, ns2__Map *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__Map);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__Map ** SOAP_FMAC4 soap_get_PointerTons2__Map(struct soap *soap, ns2__Map **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__Map(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns2__Map ** SOAP_FMAC4 soap_in_PointerTons2__Map(struct soap *soap, const char *tag, ns2__Map **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__Map **)soap_malloc(soap, sizeof(ns2__Map *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__Map *)soap_instantiate_ns2__Map(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__Map ** p = (ns2__Map **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__Map, sizeof(ns2__Map), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__mapItem(struct soap *soap, ns2__mapItem *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__mapItem))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__mapItem(struct soap *soap, ns2__mapItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__mapItem);
	if (soap_out_PointerTons2__mapItem(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__mapItem(struct soap *soap, const char *tag, int id, ns2__mapItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__mapItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__mapItem ** SOAP_FMAC4 soap_get_PointerTons2__mapItem(struct soap *soap, ns2__mapItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__mapItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns2__mapItem ** SOAP_FMAC4 soap_in_PointerTons2__mapItem(struct soap *soap, const char *tag, ns2__mapItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__mapItem **)soap_malloc(soap, sizeof(ns2__mapItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__mapItem *)soap_instantiate_ns2__mapItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__mapItem ** p = (ns2__mapItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__mapItem, sizeof(ns2__mapItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyType(struct soap *soap, xsd__anyType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__anyType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap *soap, xsd__anyType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__anyType);
	if (soap_out_PointerToxsd__anyType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap *soap, const char *tag, int id, xsd__anyType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__anyType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_get_PointerToxsd__anyType(struct soap *soap, xsd__anyType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_in_PointerToxsd__anyType(struct soap *soap, const char *tag, xsd__anyType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__anyType **)soap_malloc(soap, sizeof(xsd__anyType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__anyType *)soap_instantiate_xsd__anyType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__anyType ** p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), 0);
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__long, sizeof(xsd__long), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__string, sizeof(xsd__string), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__mapItem, sizeof(ns2__mapItem), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__Map, sizeof(ns2__Map), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__Result, sizeof(ns3__Result), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__WSNode, sizeof(ns3__WSNode), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__WSCluster, sizeof(ns3__WSCluster), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__WSFarm, sizeof(ns3__WSFarm), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__WSConf, sizeof(ns3__WSConf), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult, sizeof(ArrayOf_USCOREtns1_USCOREResult), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring, sizeof(ArrayOf_USCORExsd_USCOREstring), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode, sizeof(ArrayOf_USCOREtns1_USCOREWSNode), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster, sizeof(ArrayOf_USCOREtns1_USCOREWSCluster), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf, sizeof(ArrayOf_USCOREtns1_USCOREWSConf), 0);
		}
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__mapItem(struct soap *soap, std::vector<ns2__mapItem * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__mapItem(struct soap *soap, const std::vector<ns2__mapItem * >*a)
{
	for (std::vector<ns2__mapItem * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons2__mapItem(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__mapItem(struct soap *soap, const char *tag, int id, const std::vector<ns2__mapItem * >*a, const char *type)
{
	for (std::vector<ns2__mapItem * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons2__mapItem(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns2__mapItem * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__mapItem(struct soap *soap, const char *tag, std::vector<ns2__mapItem * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons2__mapItem(soap, -1)))
		return NULL;
	ns2__mapItem *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns2__mapItem, SOAP_TYPE_std__vectorTemplateOfPointerTons2__mapItem, sizeof(ns2__mapItem), 1))
				break;
			if (!soap_in_PointerTons2__mapItem(soap, tag, NULL, "ns2:mapItem"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons2__mapItem(soap, tag, &n, "ns2:mapItem"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns2__mapItem * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons2__mapItem(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons2__mapItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons2__mapItem(struct soap *soap, std::vector<ns2__mapItem * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns2__mapItem * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons2__mapItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons2__mapItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons2__mapItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns2__mapItem * >;
		if (size)
			*size = sizeof(std::vector<ns2__mapItem * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns2__mapItem * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns2__mapItem * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns2__mapItem * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__mapItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns2__mapItem * > %p -> %p\n", q, p));
	*(std::vector<ns2__mapItem * >*)p = *(std::vector<ns2__mapItem * >*)q;
}

/* End of soapC.cpp */
