/* soapStub.h
   Generated by gSOAP 2.7.10 from soapMLWebService.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (8)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() : __item(NULL), soap(NULL) { }
	virtual ~xsd__anyType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (10)
/* Primitive xsd:long schema type: */
class SOAP_CMAC xsd__long : public xsd__anyType
{
public:
	LONG64 __item;
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_xsd__long */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__long() : __item(0) { }
	virtual ~xsd__long() { }
};
#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (12)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string()  { }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_ns2__mapItem
#define SOAP_TYPE_ns2__mapItem (14)
/* ns2:mapItem */
class SOAP_CMAC ns2__mapItem : public xsd__anyType
{
public:
	xsd__anyType *key;	/* optional element of type xsd:anyType */
	xsd__anyType *value;	/* optional element of type xsd:anyType */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns2__mapItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__mapItem() : key(NULL), value(NULL) { }
	virtual ~ns2__mapItem() { }
};
#endif

#ifndef SOAP_TYPE_ns2__Map
#define SOAP_TYPE_ns2__Map (15)
/* ns2:Map */
class SOAP_CMAC ns2__Map : public xsd__anyType
{
public:
	std::vector<ns2__mapItem * >item;	/* optional element of type ns2:mapItem */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns2__Map */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__Map()  { }
	virtual ~ns2__Map() { }
};
#endif

#ifndef SOAP_TYPE_ns3__Result
#define SOAP_TYPE_ns3__Result (16)
/* ns3:Result */
class SOAP_CMAC ns3__Result : public xsd__anyType
{
public:
	std::string *clusterName;	/* optional element of type xsd:string */
	std::string *farmName;	/* optional element of type xsd:string */
	std::string *nodeName;	/* optional element of type xsd:string */
	ns2__Map *param;	/* optional element of type ns2:Map */
	LONG64 time;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns3__Result */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__Result() : clusterName(NULL), farmName(NULL), nodeName(NULL), param(NULL), time(0) { }
	virtual ~ns3__Result() { }
};
#endif

#ifndef SOAP_TYPE_ns3__WSNode
#define SOAP_TYPE_ns3__WSNode (17)
/* ns3:WSNode */
class SOAP_CMAC ns3__WSNode : public xsd__anyType
{
public:
	std::string *nodeName;	/* optional element of type xsd:string */
	class ArrayOf_USCORExsd_USCOREstring *paramList;	/* optional element of type ArrayOfstring */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns3__WSNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__WSNode() : nodeName(NULL), paramList(NULL) { }
	virtual ~ns3__WSNode() { }
};
#endif

#ifndef SOAP_TYPE_ns3__WSCluster
#define SOAP_TYPE_ns3__WSCluster (18)
/* ns3:WSCluster */
class SOAP_CMAC ns3__WSCluster : public xsd__anyType
{
public:
	std::string *clusterName;	/* optional element of type xsd:string */
	class ArrayOf_USCOREtns1_USCOREWSNode *nodeList;	/* optional element of type ArrayOfWSNode */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns3__WSCluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__WSCluster() : clusterName(NULL), nodeList(NULL) { }
	virtual ~ns3__WSCluster() { }
};
#endif

#ifndef SOAP_TYPE_ns3__WSFarm
#define SOAP_TYPE_ns3__WSFarm (19)
/* ns3:WSFarm */
class SOAP_CMAC ns3__WSFarm : public xsd__anyType
{
public:
	class ArrayOf_USCOREtns1_USCOREWSCluster *clusterList;	/* optional element of type ArrayOfWSCluster */
	std::string *farmName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns3__WSFarm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__WSFarm() : clusterList(NULL), farmName(NULL) { }
	virtual ~ns3__WSFarm() { }
};
#endif

#ifndef SOAP_TYPE_ns3__WSConf
#define SOAP_TYPE_ns3__WSConf (20)
/* ns3:WSConf */
class SOAP_CMAC ns3__WSConf : public xsd__anyType
{
public:
	LONG64 confTime;	/* required element of type xsd:long */
	ns3__WSFarm *wsFarm;	/* optional element of type ns3:WSFarm */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns3__WSConf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__WSConf() : confTime(0), wsFarm(NULL) { }
	virtual ~ns3__WSConf() { }
};
#endif

#ifndef SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult
#define SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult (21)
/* SOAP encoded array of ns3:Result schema type: */
class SOAP_CMAC ArrayOf_USCOREtns1_USCOREResult : public xsd__anyType
{
public:
	ns3__Result **__ptr;
	int __size;
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ArrayOf_USCOREtns1_USCOREResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ArrayOf_USCOREtns1_USCOREResult() : __ptr(NULL), __size(0) { }
	virtual ~ArrayOf_USCOREtns1_USCOREResult() { }
};
#endif

#ifndef SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring
#define SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring (22)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC ArrayOf_USCORExsd_USCOREstring : public xsd__anyType
{
public:
	std::string *__ptr;
	int __size;
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ArrayOf_USCORExsd_USCOREstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ArrayOf_USCORExsd_USCOREstring() : __ptr(NULL), __size(0) { }
	virtual ~ArrayOf_USCORExsd_USCOREstring() { }
};
#endif

#ifndef SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode
#define SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode (23)
/* SOAP encoded array of ns3:WSNode schema type: */
class SOAP_CMAC ArrayOf_USCOREtns1_USCOREWSNode : public xsd__anyType
{
public:
	ns3__WSNode **__ptr;
	int __size;
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ArrayOf_USCOREtns1_USCOREWSNode() : __ptr(NULL), __size(0) { }
	virtual ~ArrayOf_USCOREtns1_USCOREWSNode() { }
};
#endif

#ifndef SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster
#define SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster (24)
/* SOAP encoded array of ns3:WSCluster schema type: */
class SOAP_CMAC ArrayOf_USCOREtns1_USCOREWSCluster : public xsd__anyType
{
public:
	ns3__WSCluster **__ptr;
	int __size;
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSCluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ArrayOf_USCOREtns1_USCOREWSCluster() : __ptr(NULL), __size(0) { }
	virtual ~ArrayOf_USCOREtns1_USCOREWSCluster() { }
};
#endif

#ifndef SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf
#define SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf (25)
/* SOAP encoded array of ns3:WSConf schema type: */
class SOAP_CMAC ArrayOf_USCOREtns1_USCOREWSConf : public xsd__anyType
{
public:
	ns3__WSConf **__ptr;
	int __size;
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_ArrayOf_USCOREtns1_USCOREWSConf */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ArrayOf_USCOREtns1_USCOREWSConf() : __ptr(NULL), __size(0) { }
	virtual ~ArrayOf_USCOREtns1_USCOREWSConf() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getValuesResponse
#define SOAP_TYPE_ns1__getValuesResponse (43)
/* ns1:getValuesResponse */
struct ns1__getValuesResponse
{
public:
	ArrayOf_USCOREtns1_USCOREResult *_getValuesReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfResult */
};
#endif

#ifndef SOAP_TYPE_ns1__getValues
#define SOAP_TYPE_ns1__getValues (47)
/* ns1:getValues */
struct ns1__getValues
{
public:
	std::string _in0;	/* required element of type xsd:string */
	std::string _in1;	/* required element of type xsd:string */
	std::string _in2;	/* required element of type xsd:string */
	std::string _in3;	/* required element of type xsd:string */
	LONG64 _in4;	/* required element of type xsd:long */
	LONG64 _in5;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_ns1__getConfigurationResponse
#define SOAP_TYPE_ns1__getConfigurationResponse (48)
/* ns1:getConfigurationResponse */
struct ns1__getConfigurationResponse
{
public:
	ArrayOf_USCOREtns1_USCOREWSConf *_getConfigurationReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfWSConf */
};
#endif

#ifndef SOAP_TYPE_ns1__getConfiguration
#define SOAP_TYPE_ns1__getConfiguration (52)
/* ns1:getConfiguration */
struct ns1__getConfiguration
{
public:
	LONG64 _in0;	/* required element of type xsd:long */
	LONG64 _in1;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_ns1__getLatestConfigurationResponse
#define SOAP_TYPE_ns1__getLatestConfigurationResponse (53)
/* ns1:getLatestConfigurationResponse */
struct ns1__getLatestConfigurationResponse
{
public:
	ArrayOf_USCOREtns1_USCOREWSConf *_getLatestConfigurationReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfWSConf */
};
#endif

#ifndef SOAP_TYPE_ns1__getLatestConfiguration
#define SOAP_TYPE_ns1__getLatestConfiguration (56)
/* ns1:getLatestConfiguration */
struct ns1__getLatestConfiguration
{
public:
	std::string _in0;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns1__getLastValuesResponse
#define SOAP_TYPE_ns1__getLastValuesResponse (57)
/* ns1:getLastValuesResponse */
struct ns1__getLastValuesResponse
{
public:
	ArrayOf_USCOREtns1_USCOREResult *getLastValuesReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfResult */
};
#endif

#ifndef SOAP_TYPE_ns1__getLastValues
#define SOAP_TYPE_ns1__getLastValues (60)
/* ns1:getLastValues */
struct ns1__getLastValues
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns1__getFilteredLastValuesResponse
#define SOAP_TYPE_ns1__getFilteredLastValuesResponse (61)
/* ns1:getFilteredLastValuesResponse */
struct ns1__getFilteredLastValuesResponse
{
public:
	ArrayOf_USCOREtns1_USCOREResult *_getFilteredLastValuesReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfResult */
};
#endif

#ifndef SOAP_TYPE_ns1__getFilteredLastValues
#define SOAP_TYPE_ns1__getFilteredLastValues (64)
/* ns1:getFilteredLastValues */
struct ns1__getFilteredLastValues
{
public:
	std::string _in0;	/* required element of type xsd:string */
	std::string _in1;	/* required element of type xsd:string */
	std::string _in2;	/* required element of type xsd:string */
	std::string _in3;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns3__networkMeasurementSetResponse
#define SOAP_TYPE_ns3__networkMeasurementSetResponse (65)
/* ns3:networkMeasurementSetResponse */
struct ns3__networkMeasurementSetResponse
{
public:
	ns2__Map *_networkMeasurementSetReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:Map */
};
#endif

#ifndef SOAP_TYPE_ns3__networkMeasurementSet
#define SOAP_TYPE_ns3__networkMeasurementSet (68)
/* ns3:networkMeasurementSet */
struct ns3__networkMeasurementSet
{
public:
	ns2__Map *_in0;	/* optional element of type ns2:Map */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (69)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (70)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (72)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (75)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (76)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getValues(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _in0, std::string _in1, std::string _in2, std::string _in3, LONG64 _in4, LONG64 _in5, struct ns1__getValuesResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 _in0, LONG64 _in1, struct ns1__getConfigurationResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getLatestConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _in0, struct ns1__getLatestConfigurationResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getLastValues(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__getLastValuesResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getFilteredLastValues(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _in0, std::string _in1, std::string _in2, std::string _in3, struct ns1__getFilteredLastValuesResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns3__networkMeasurementSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__Map *_in0, struct ns3__networkMeasurementSetResponse &_param_6);

#endif

/* End of soapStub.h */
